"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.HooksController = void 0;

var triggers = _interopRequireWildcard(require("../triggers"));

var Parse = _interopRequireWildcard(require("parse/node"));

var _request = _interopRequireDefault(require("../request"));

var _logger = require("../logger");

var _http = _interopRequireDefault(require("http"));

var _https = _interopRequireDefault(require("https"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// -disable-next
// -disable-next
const DefaultHooksCollectionName = '_Hooks';
const HTTPAgents = {
  http: new _http.default.Agent({
    keepAlive: true
  }),
  https: new _https.default.Agent({
    keepAlive: true
  })
};

class HooksController {
  constructor(applicationId, databaseController, webhookKey) {
    this._applicationId = applicationId;
    this._webhookKey = webhookKey;
    this.database = databaseController;
  }

  load() {
    return this._getHooks().then(hooks => {
      hooks = hooks || [];
      hooks.forEach(hook => {
        this.addHookToTriggers(hook);
      });
    });
  }

  getFunction(functionName) {
    return this._getHooks({
      functionName: functionName
    }).then(results => results[0]);
  }

  getFunctions() {
    return this._getHooks({
      functionName: {
        $exists: true
      }
    });
  }

  getTrigger(className, triggerName) {
    return this._getHooks({
      className: className,
      triggerName: triggerName
    }).then(results => results[0]);
  }

  getTriggers() {
    return this._getHooks({
      className: {
        $exists: true
      },
      triggerName: {
        $exists: true
      }
    });
  }

  deleteFunction(functionName) {
    triggers.removeFunction(functionName, this._applicationId);
    return this._removeHooks({
      functionName: functionName
    });
  }

  deleteTrigger(className, triggerName) {
    triggers.removeTrigger(triggerName, className, this._applicationId);
    return this._removeHooks({
      className: className,
      triggerName: triggerName
    });
  }

  _getHooks(query = {}) {
    return this.database.find(DefaultHooksCollectionName, query).then(results => {
      return results.map(result => {
        delete result.objectId;
        return result;
      });
    });
  }

  _removeHooks(query) {
    return this.database.destroy(DefaultHooksCollectionName, query).then(() => {
      return Promise.resolve({});
    });
  }

  saveHook(hook) {
    var query;

    if (hook.functionName && hook.url) {
      query = {
        functionName: hook.functionName
      };
    } else if (hook.triggerName && hook.className && hook.url) {
      query = {
        className: hook.className,
        triggerName: hook.triggerName
      };
    } else {
      throw new Parse.Error(143, 'invalid hook declaration');
    }

    return this.database.update(DefaultHooksCollectionName, query, hook, {
      upsert: true
    }).then(() => {
      return Promise.resolve(hook);
    });
  }

  addHookToTriggers(hook) {
    var wrappedFunction = wrapToHTTPRequest(hook, this._webhookKey);
    wrappedFunction.url = hook.url;

    if (hook.className) {
      triggers.addTrigger(hook.triggerName, hook.className, wrappedFunction, this._applicationId);
    } else {
      triggers.addFunction(hook.functionName, wrappedFunction, null, this._applicationId);
    }
  }

  addHook(hook) {
    this.addHookToTriggers(hook);
    return this.saveHook(hook);
  }

  createOrUpdateHook(aHook) {
    var hook;

    if (aHook && aHook.functionName && aHook.url) {
      hook = {};
      hook.functionName = aHook.functionName;
      hook.url = aHook.url;
    } else if (aHook && aHook.className && aHook.url && aHook.triggerName && triggers.Types[aHook.triggerName]) {
      hook = {};
      hook.className = aHook.className;
      hook.url = aHook.url;
      hook.triggerName = aHook.triggerName;
    } else {
      throw new Parse.Error(143, 'invalid hook declaration');
    }

    return this.addHook(hook);
  }

  createHook(aHook) {
    if (aHook.functionName) {
      return this.getFunction(aHook.functionName).then(result => {
        if (result) {
          throw new Parse.Error(143, `function name: ${aHook.functionName} already exits`);
        } else {
          return this.createOrUpdateHook(aHook);
        }
      });
    } else if (aHook.className && aHook.triggerName) {
      return this.getTrigger(aHook.className, aHook.triggerName).then(result => {
        if (result) {
          throw new Parse.Error(143, `class ${aHook.className} already has trigger ${aHook.triggerName}`);
        }

        return this.createOrUpdateHook(aHook);
      });
    }

    throw new Parse.Error(143, 'invalid hook declaration');
  }

  updateHook(aHook) {
    if (aHook.functionName) {
      return this.getFunction(aHook.functionName).then(result => {
        if (result) {
          return this.createOrUpdateHook(aHook);
        }

        throw new Parse.Error(143, `no function named: ${aHook.functionName} is defined`);
      });
    } else if (aHook.className && aHook.triggerName) {
      return this.getTrigger(aHook.className, aHook.triggerName).then(result => {
        if (result) {
          return this.createOrUpdateHook(aHook);
        }

        throw new Parse.Error(143, `class ${aHook.className} does not exist`);
      });
    }

    throw new Parse.Error(143, 'invalid hook declaration');
  }

}

exports.HooksController = HooksController;

function wrapToHTTPRequest(hook, key) {
  return req => {
    const jsonBody = {};

    for (var i in req) {
      jsonBody[i] = req[i];
    }

    if (req.object) {
      jsonBody.object = req.object.toJSON();
      jsonBody.object.className = req.object.className;
    }

    if (req.original) {
      jsonBody.original = req.original.toJSON();
      jsonBody.original.className = req.original.className;
    }

    const jsonRequest = {
      url: hook.url,
      headers: {
        'Content-Type': 'application/json'
      },
      body: jsonBody,
      method: 'POST'
    };
    const agent = hook.url.startsWith('https') ? HTTPAgents['https'] : HTTPAgents['http'];
    jsonRequest.agent = agent;

    if (key) {
      jsonRequest.headers['X-Parse-Webhook-Key'] = key;
    } else {
      _logger.logger.warn('Making outgoing webhook request without webhookKey being set!');
    }

    return (0, _request.default)(jsonRequest).then(response => {
      let err;
      let result;
      let body = response.data;

      if (body) {
        if (typeof body === 'string') {
          try {
            body = JSON.parse(body);
          } catch (e) {
            err = {
              error: 'Malformed response',
              code: -1,
              partialResponse: body.substring(0, 100)
            };
          }
        }

        if (!err) {
          result = body.success;
          err = body.error;
        }
      }

      if (err) {
        throw err;
      } else if (hook.triggerName === 'beforeSave') {
        if (typeof result === 'object') {
          delete result.createdAt;
          delete result.updatedAt;
        }

        return {
          object: result
        };
      } else {
        return result;
      }
    });
  };
}

var _default = HooksController;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db250cm9sbGVycy9Ib29rc0NvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsiRGVmYXVsdEhvb2tzQ29sbGVjdGlvbk5hbWUiLCJIVFRQQWdlbnRzIiwiaHR0cCIsIkFnZW50Iiwia2VlcEFsaXZlIiwiaHR0cHMiLCJIb29rc0NvbnRyb2xsZXIiLCJjb25zdHJ1Y3RvciIsImFwcGxpY2F0aW9uSWQiLCJkYXRhYmFzZUNvbnRyb2xsZXIiLCJ3ZWJob29rS2V5IiwiX2FwcGxpY2F0aW9uSWQiLCJfd2ViaG9va0tleSIsImRhdGFiYXNlIiwibG9hZCIsIl9nZXRIb29rcyIsInRoZW4iLCJob29rcyIsImZvckVhY2giLCJob29rIiwiYWRkSG9va1RvVHJpZ2dlcnMiLCJnZXRGdW5jdGlvbiIsImZ1bmN0aW9uTmFtZSIsInJlc3VsdHMiLCJnZXRGdW5jdGlvbnMiLCIkZXhpc3RzIiwiZ2V0VHJpZ2dlciIsImNsYXNzTmFtZSIsInRyaWdnZXJOYW1lIiwiZ2V0VHJpZ2dlcnMiLCJkZWxldGVGdW5jdGlvbiIsInRyaWdnZXJzIiwicmVtb3ZlRnVuY3Rpb24iLCJfcmVtb3ZlSG9va3MiLCJkZWxldGVUcmlnZ2VyIiwicmVtb3ZlVHJpZ2dlciIsInF1ZXJ5IiwiZmluZCIsIm1hcCIsInJlc3VsdCIsIm9iamVjdElkIiwiZGVzdHJveSIsIlByb21pc2UiLCJyZXNvbHZlIiwic2F2ZUhvb2siLCJ1cmwiLCJQYXJzZSIsIkVycm9yIiwidXBkYXRlIiwidXBzZXJ0Iiwid3JhcHBlZEZ1bmN0aW9uIiwid3JhcFRvSFRUUFJlcXVlc3QiLCJhZGRUcmlnZ2VyIiwiYWRkRnVuY3Rpb24iLCJhZGRIb29rIiwiY3JlYXRlT3JVcGRhdGVIb29rIiwiYUhvb2siLCJUeXBlcyIsImNyZWF0ZUhvb2siLCJ1cGRhdGVIb29rIiwia2V5IiwicmVxIiwianNvbkJvZHkiLCJpIiwib2JqZWN0IiwidG9KU09OIiwib3JpZ2luYWwiLCJqc29uUmVxdWVzdCIsImhlYWRlcnMiLCJib2R5IiwibWV0aG9kIiwiYWdlbnQiLCJzdGFydHNXaXRoIiwibG9nZ2VyIiwid2FybiIsInJlc3BvbnNlIiwiZXJyIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsImUiLCJlcnJvciIsImNvZGUiLCJwYXJ0aWFsUmVzcG9uc2UiLCJzdWJzdHJpbmciLCJzdWNjZXNzIiwiY3JlYXRlZEF0IiwidXBkYXRlZEF0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7O0FBRUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQU5BO0FBRUE7QUFNQSxNQUFNQSwwQkFBMEIsR0FBRyxRQUFuQztBQUNBLE1BQU1DLFVBQVUsR0FBRztBQUNqQkMsRUFBQUEsSUFBSSxFQUFFLElBQUlBLGNBQUtDLEtBQVQsQ0FBZTtBQUFFQyxJQUFBQSxTQUFTLEVBQUU7QUFBYixHQUFmLENBRFc7QUFFakJDLEVBQUFBLEtBQUssRUFBRSxJQUFJQSxlQUFNRixLQUFWLENBQWdCO0FBQUVDLElBQUFBLFNBQVMsRUFBRTtBQUFiLEdBQWhCO0FBRlUsQ0FBbkI7O0FBS08sTUFBTUUsZUFBTixDQUFzQjtBQUszQkMsRUFBQUEsV0FBVyxDQUFDQyxhQUFELEVBQXdCQyxrQkFBeEIsRUFBNENDLFVBQTVDLEVBQXdEO0FBQ2pFLFNBQUtDLGNBQUwsR0FBc0JILGFBQXRCO0FBQ0EsU0FBS0ksV0FBTCxHQUFtQkYsVUFBbkI7QUFDQSxTQUFLRyxRQUFMLEdBQWdCSixrQkFBaEI7QUFDRDs7QUFFREssRUFBQUEsSUFBSSxHQUFHO0FBQ0wsV0FBTyxLQUFLQyxTQUFMLEdBQWlCQyxJQUFqQixDQUFzQkMsS0FBSyxJQUFJO0FBQ3BDQSxNQUFBQSxLQUFLLEdBQUdBLEtBQUssSUFBSSxFQUFqQjtBQUNBQSxNQUFBQSxLQUFLLENBQUNDLE9BQU4sQ0FBY0MsSUFBSSxJQUFJO0FBQ3BCLGFBQUtDLGlCQUFMLENBQXVCRCxJQUF2QjtBQUNELE9BRkQ7QUFHRCxLQUxNLENBQVA7QUFNRDs7QUFFREUsRUFBQUEsV0FBVyxDQUFDQyxZQUFELEVBQWU7QUFD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LGVBQWUsRUFBRWQsSUFBSSxDQUFDZSxTQUFMLENBQWUsQ0FBZixFQUFrQixHQUFsQjtBQUhiLGFBQU47QUFLRDtBQUNGOztBQUNELFlBQUksQ0FBQ1IsR0FBTCxFQUFVO0FBQ1JyQyxVQUFBQSxNQUFNLEdBQUc4QixJQUFJLENBQUNnQixPQUFkO0FBQ0FULFVBQUFBLEdBQUcsR0FBR1AsSUFBSSxDQUFDWSxLQUFYO0FBQ0Q7QUFDRjs7QUFDRCxVQUFJTCxHQUFKLEVBQVM7QUFDUCxjQUFNQSxHQUFOO0FBQ0QsT0FGRCxNQUVPLElBQUl6RCxJQUFJLENBQUNTLFdBQUwsS0FBcUIsWUFBekIsRUFBdUM7QUFDNUMsWUFBSSxPQUFPVyxNQUFQLEtBQWtCLFFBQXRCLEVBQWdDO0FBQzlCLGlCQUFPQSxNQUFNLENBQUMrQyxTQUFkO0FBQ0EsaUJBQU8vQyxNQUFNLENBQUNnRCxTQUFkO0FBQ0Q7O0FBQ0QsZUFBTztBQUFFdkIsVUFBQUEsTUFBTSxFQUFFekI7QUFBVixTQUFQO0FBQ0QsT0FOTSxNQU1BO0FBQ0wsZUFBT0EsTUFBUDtBQUNEO0FBQ0YsS0FoQ00sQ0FBUDtBQWlDRCxHQW5FRDtBQW9FRDs7ZUFFY2pDLGUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGZsb3cgd2VhayAqL1xuXG5pbXBvcnQgKiBhcyB0cmlnZ2VycyBmcm9tICcuLi90cmlnZ2Vycyc7XG4vLyBAZmxvdy1kaXNhYmxlLW5leHRcbmltcG9ydCAqIGFzIFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuLy8gQGZsb3ctZGlzYWJsZS1uZXh0XG5pbXBvcnQgcmVxdWVzdCBmcm9tICcuLi9yZXF1ZXN0JztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgaHR0cCBmcm9tICdodHRwJztcbmltcG9ydCBodHRwcyBmcm9tICdodHRwcyc7XG5cbmNvbnN0IERlZmF1bHRIb29rc0NvbGxlY3Rpb25OYW1lID0gJ19Ib29rcyc7XG5jb25zdCBIVFRQQWdlbnRzID0ge1xuICBodHRwOiBuZXcgaHR0cC5BZ2VudCh7IGtlZXBBbGl2ZTogdHJ1ZSB9KSxcbiAgaHR0cHM6IG5ldyBodHRwcy5BZ2VudCh7IGtlZXBBbGl2ZTogdHJ1ZSB9KSxcbn07XG5cbmV4cG9ydCBjbGFzcyBIb29rc0NvbnRyb2xsZXIge1xuICBfYXBwbGljYXRpb25JZDogc3RyaW5nO1xuICBfd2ViaG9va0tleTogc3RyaW5nO1xuICBkYXRhYmFzZTogYW55O1xuXG4gIGNvbnN0cnVjdG9yKGFwcGxpY2F0aW9uSWQ6IHN0cmluZywgZGF0YWJhc2VDb250cm9sbGVyLCB3ZWJob29rS2V5KSB7XG4gICAgdGhpcy5fYXBwbGljYXRpb25JZCA9IGFwcGxpY2F0aW9uSWQ7XG4gICAgdGhpcy5fd2ViaG9va0tleSA9IHdlYmhvb2tLZXk7XG4gICAgdGhpcy5kYXRhYmFzZSA9IGRhdGFiYXNlQ29udHJvbGxlcjtcbiAgfVxuXG4gIGxvYWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldEhvb2tzKCkudGhlbihob29rcyA9PiB7XG4gICAgICBob29rcyA9IGhvb2tzIHx8IFtdO1xuICAgICAgaG9va3MuZm9yRWFjaChob29rID0+IHtcbiAgICAgICAgdGhpcy5hZGRIb29rVG9UcmlnZ2Vycyhob29rKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0RnVuY3Rpb24oZnVuY3Rpb25OYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldEhvb2tzKHsgZnVuY3Rpb25OYW1lOiBmdW5jdGlvbk5hbWUgfSkudGhlbihcbiAgICAgIHJlc3VsdHMgPT4gcmVzdWx0c1swXVxuICAgICk7XG4gIH1cblxuICBnZXRGdW5jdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldEhvb2tzKHsgZnVuY3Rpb25OYW1lOiB7ICRleGlzdHM6IHRydWUgfSB9KTtcbiAgfVxuXG4gIGdldFRyaWdnZXIoY2xhc3NOYW1lLCB0cmlnZ2VyTmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9nZXRIb29rcyh7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgIHRyaWdnZXJOYW1lOiB0cmlnZ2VyTmFtZSxcbiAgICB9KS50aGVuKHJlc3VsdHMgPT4gcmVzdWx0c1swXSk7XG4gIH1cblxuICBnZXRUcmlnZ2VycygpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0SG9va3Moe1xuICAgICAgY2xhc3NOYW1lOiB7ICRleGlzdHM6IHRydWUgfSxcbiAgICAgIHRyaWdnZXJOYW1lOiB7ICRleGlzdHM6IHRydWUgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGRlbGV0ZUZ1bmN0aW9uKGZ1bmN0aW9uTmFtZSkge1xuICAgIHRyaWdnZXJzLnJlbW92ZUZ1bmN0aW9uKGZ1bmN0aW9uTmFtZSwgdGhpcy5fYXBwbGljYXRpb25JZCk7XG4gICAgcmV0dXJuIHRoaXMuX3JlbW92ZUhvb2tzKHsgZnVuY3Rpb25OYW1lOiBmdW5jdGlvbk5hbWUgfSk7XG4gIH1cblxuICBkZWxldGVUcmlnZ2VyKGNsYXNzTmFtZSwgdHJpZ2dlck5hbWUpIHtcbiAgICB0cmlnZ2Vycy5yZW1vdmVUcmlnZ2VyKHRyaWdnZXJOYW1lLCBjbGFzc05hbWUsIHRoaXMuX2FwcGxpY2F0aW9uSWQpO1xuICAgIHJldHVybiB0aGlzLl9yZW1vdmVIb29rcyh7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgIHRyaWdnZXJOYW1lOiB0cmlnZ2VyTmFtZSxcbiAgICB9KTtcbiAgfVxuXG4gIF9nZXRIb29rcyhxdWVyeSA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YWJhc2VcbiAgICAgIC5maW5kKERlZmF1bHRIb29rc0NvbGxlY3Rpb25OYW1lLCBxdWVyeSlcbiAgICAgIC50aGVuKHJlc3VsdHMgPT4ge1xuICAgICAgICByZXR1cm4gcmVzdWx0cy5tYXAocmVzdWx0ID0+IHtcbiAgICAgICAgICBkZWxldGUgcmVzdWx0Lm9iamVjdElkO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH1cblxuICBfcmVtb3ZlSG9va3MocXVlcnkpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhYmFzZS5kZXN0cm95KERlZmF1bHRIb29rc0NvbGxlY3Rpb25OYW1lLCBxdWVyeSkudGhlbigoKSA9PiB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHt9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHNhdmVIb29rKGhvb2spIHtcbiAgICB2YXIgcXVlcnk7XG4gICAgaWYgKGhvb2suZnVuY3Rpb25OYW1lICYmIGhvb2sudXJsKSB7XG4gICAgICBxdWVyeSA9IHsgZnVuY3Rpb25OYW1lOiBob29rLmZ1bmN0aW9uTmFtZSB9O1xuICAgIH0gZWxzZSBpZiAoaG9vay50cmlnZ2VyTmFtZSAmJiBob29rLmNsYXNzTmFtZSAmJiBob29rLnVybCkge1xuICAgICAgcXVlcnkgPSB7IGNsYXNzTmFtZTogaG9vay5jbGFzc05hbWUsIHRyaWdnZXJOYW1lOiBob29rLnRyaWdnZXJOYW1lIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcigxNDMsICdpbnZhbGlkIGhvb2sgZGVjbGFyYXRpb24nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZGF0YWJhc2VcbiAgICAgIC51cGRhdGUoRGVmYXVsdEhvb2tzQ29sbGVjdGlvbk5hbWUsIHF1ZXJ5LCBob29rLCB7IHVwc2VydDogdHJ1ZSB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGhvb2spO1xuICAgICAgfSk7XG4gIH1cblxuICBhZGRIb29rVG9UcmlnZ2Vycyhob29rKSB7XG4gICAgdmFyIHdyYXBwZWRGdW5jdGlvbiA9IHdyYXBUb0hUVFBSZXF1ZXN0KGhvb2ssIHRoaXMuX3dlYmhvb2tLZXkpO1xuICAgIHdyYXBwZWRGdW5jdGlvbi51cmwgPSBob29rLnVybDtcbiAgICBpZiAoaG9vay5jbGFzc05hbWUpIHtcbiAgICAgIHRyaWdnZXJzLmFkZFRyaWdnZXIoXG4gICAgICAgIGhvb2sudHJpZ2dlck5hbWUsXG4gICAgICAgIGhvb2suY2xhc3NOYW1lLFxuICAgICAgICB3cmFwcGVkRnVuY3Rpb24sXG4gICAgICAgIHRoaXMuX2FwcGxpY2F0aW9uSWRcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyaWdnZXJzLmFkZEZ1bmN0aW9uKFxuICAgICAgICBob29rLmZ1bmN0aW9uTmFtZSxcbiAgICAgICAgd3JhcHBlZEZ1bmN0aW9uLFxuICAgICAgICBudWxsLFxuICAgICAgICB0aGlzLl9hcHBsaWNhdGlvbklkXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGFkZEhvb2soaG9vaykge1xuICAgIHRoaXMuYWRkSG9va1RvVHJpZ2dlcnMoaG9vayk7XG4gICAgcmV0dXJuIHRoaXMuc2F2ZUhvb2soaG9vayk7XG4gIH1cblxuICBjcmVhdGVPclVwZGF0ZUhvb2soYUhvb2spIHtcbiAgICB2YXIgaG9vaztcbiAgICBpZiAoYUhvb2sgJiYgYUhvb2suZnVuY3Rpb25OYW1lICYmIGFIb29rLnVybCkge1xuICAgICAgaG9vayA9IHt9O1xuICAgICAgaG9vay5mdW5jdGlvbk5hbWUgPSBhSG9vay5mdW5jdGlvbk5hbWU7XG4gICAgICBob29rLnVybCA9IGFIb29rLnVybDtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgYUhvb2sgJiZcbiAgICAgIGFIb29rLmNsYXNzTmFtZSAmJlxuICAgICAgYUhvb2sudXJsICYmXG4gICAgICBhSG9vay50cmlnZ2VyTmFtZSAmJlxuICAgICAgdHJpZ2dlcnMuVHlwZXNbYUhvb2sudHJpZ2dlck5hbWVdXG4gICAgKSB7XG4gICAgICBob29rID0ge307XG4gICAgICBob29rLmNsYXNzTmFtZSA9IGFIb29rLmNsYXNzTmFtZTtcbiAgICAgIGhvb2sudXJsID0gYUhvb2sudXJsO1xuICAgICAgaG9vay50cmlnZ2VyTmFtZSA9IGFIb29rLnRyaWdnZXJOYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoMTQzLCAnaW52YWxpZCBob29rIGRlY2xhcmF0aW9uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuYWRkSG9vayhob29rKTtcbiAgfVxuXG4gIGNyZWF0ZUhvb2soYUhvb2spIHtcbiAgICBpZiAoYUhvb2suZnVuY3Rpb25OYW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRGdW5jdGlvbihhSG9vay5mdW5jdGlvbk5hbWUpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgICAgIDE0MyxcbiAgICAgICAgICAgIGBmdW5jdGlvbiBuYW1lOiAke2FIb29rLmZ1bmN0aW9uTmFtZX0gYWxyZWFkeSBleGl0c2BcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZU9yVXBkYXRlSG9vayhhSG9vayk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoYUhvb2suY2xhc3NOYW1lICYmIGFIb29rLnRyaWdnZXJOYW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRUcmlnZ2VyKGFIb29rLmNsYXNzTmFtZSwgYUhvb2sudHJpZ2dlck5hbWUpLnRoZW4oXG4gICAgICAgIHJlc3VsdCA9PiB7XG4gICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgICAgICAgICAxNDMsXG4gICAgICAgICAgICAgIGBjbGFzcyAke2FIb29rLmNsYXNzTmFtZX0gYWxyZWFkeSBoYXMgdHJpZ2dlciAke1xuICAgICAgICAgICAgICAgIGFIb29rLnRyaWdnZXJOYW1lXG4gICAgICAgICAgICAgIH1gXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVPclVwZGF0ZUhvb2soYUhvb2spO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcigxNDMsICdpbnZhbGlkIGhvb2sgZGVjbGFyYXRpb24nKTtcbiAgfVxuXG4gIHVwZGF0ZUhvb2soYUhvb2spIHtcbiAgICBpZiAoYUhvb2suZnVuY3Rpb25OYW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRGdW5jdGlvbihhSG9vay5mdW5jdGlvbk5hbWUpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZU9yVXBkYXRlSG9vayhhSG9vayk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgICAgIDE0MyxcbiAgICAgICAgICBgbm8gZnVuY3Rpb24gbmFtZWQ6ICR7YUhvb2suZnVuY3Rpb25OYW1lfSBpcyBkZWZpbmVkYFxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChhSG9vay5jbGFzc05hbWUgJiYgYUhvb2sudHJpZ2dlck5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFRyaWdnZXIoYUhvb2suY2xhc3NOYW1lLCBhSG9vay50cmlnZ2VyTmFtZSkudGhlbihcbiAgICAgICAgcmVzdWx0ID0+IHtcbiAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVPclVwZGF0ZUhvb2soYUhvb2spO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoMTQzLCBgY2xhc3MgJHthSG9vay5jbGFzc05hbWV9IGRvZXMgbm90IGV4aXN0YCk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcigxNDMsICdpbnZhbGlkIGhvb2sgZGVjbGFyYXRpb24nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB3cmFwVG9IVFRQUmVxdWVzdChob29rLCBrZXkpIHtcbiAgcmV0dXJuIHJlcSA9PiB7XG4gICAgY29uc3QganNvbkJvZHkgPSB7fTtcbiAgICBmb3IgKHZhciBpIGluIHJlcSkge1xuICAgICAganNvbkJvZHlbaV0gPSByZXFbaV07XG4gICAgfVxuICAgIGlmIChyZXEub2JqZWN0KSB7XG4gICAgICBqc29uQm9keS5vYmplY3QgPSByZXEub2JqZWN0LnRvSlNPTigpO1xuICAgICAganNvbkJvZHkub2JqZWN0LmNsYXNzTmFtZSA9IHJlcS5vYmplY3QuY2xhc3NOYW1lO1xuICAgIH1cbiAgICBpZiAocmVxLm9yaWdpbmFsKSB7XG4gICAgICBqc29uQm9keS5vcmlnaW5hbCA9IHJlcS5vcmlnaW5hbC50b0pTT04oKTtcbiAgICAgIGpzb25Cb2R5Lm9yaWdpbmFsLmNsYXNzTmFtZSA9IHJlcS5vcmlnaW5hbC5jbGFzc05hbWU7XG4gICAgfVxuICAgIGNvbnN0IGpzb25SZXF1ZXN0OiBhbnkgPSB7XG4gICAgICB1cmw6IGhvb2sudXJsLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IGpzb25Cb2R5LFxuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgfTtcblxuICAgIGNvbnN0IGFnZW50ID0gaG9vay51cmwuc3RhcnRzV2l0aCgnaHR0cHMnKVxuICAgICAgPyBIVFRQQWdlbnRzWydodHRwcyddXG4gICAgICA6IEhUVFBBZ2VudHNbJ2h0dHAnXTtcbiAgICBqc29uUmVxdWVzdC5hZ2VudCA9IGFnZW50O1xuXG4gICAgaWYgKGtleSkge1xuICAgICAganNvblJlcXVlc3QuaGVhZGVyc1snWC1QYXJzZS1XZWJob29rLUtleSddID0ga2V5O1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2dnZXIud2FybihcbiAgICAgICAgJ01ha2luZyBvdXRnb2luZyB3ZWJob29rIHJlcXVlc3Qgd2l0aG91dCB3ZWJob29rS2V5IGJlaW5nIHNldCEnXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gcmVxdWVzdChqc29uUmVxdWVzdCkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICBsZXQgZXJyO1xuICAgICAgbGV0IHJlc3VsdDtcbiAgICAgIGxldCBib2R5ID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgIGlmIChib2R5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgYm9keSA9IEpTT04ucGFyc2UoYm9keSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXJyID0ge1xuICAgICAgICAgICAgICBlcnJvcjogJ01hbGZvcm1lZCByZXNwb25zZScsXG4gICAgICAgICAgICAgIGNvZGU6IC0xLFxuICAgICAgICAgICAgICBwYXJ0aWFsUmVzcG9uc2U6IGJvZHkuc3Vic3RyaW5nKDAsIDEwMCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWVycikge1xuICAgICAgICAgIHJlc3VsdCA9IGJvZHkuc3VjY2VzcztcbiAgICAgICAgICBlcnIgPSBib2R5LmVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH0gZWxzZSBpZiAoaG9vay50cmlnZ2VyTmFtZSA9PT0gJ2JlZm9yZVNhdmUnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGRlbGV0ZSByZXN1bHQuY3JlYXRlZEF0O1xuICAgICAgICAgIGRlbGV0ZSByZXN1bHQudXBkYXRlZEF0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IG9iamVjdDogcmVzdWx0IH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBIb29rc0NvbnRyb2xsZXI7XG4iXX0=