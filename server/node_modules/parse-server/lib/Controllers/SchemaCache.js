"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _cryptoUtils = require("../cryptoUtils");

var _defaults = _interopRequireDefault(require("../defaults"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MAIN_SCHEMA = '__MAIN_SCHEMA';
const SCHEMA_CACHE_PREFIX = '__SCHEMA';
const ALL_KEYS = '__ALL_KEYS';

class SchemaCache {
  constructor(cacheController, ttl = _defaults.default.schemaCacheTTL, singleCache = false) {
    this.ttl = ttl;

    if (typeof ttl == 'string') {
      this.ttl = parseInt(ttl);
    }

    this.cache = cacheController;
    this.prefix = SCHEMA_CACHE_PREFIX;

    if (!singleCache) {
      this.prefix += (0, _cryptoUtils.randomString)(20);
    }
  }

  put(key, value) {
    return this.cache.get(this.prefix + ALL_KEYS).then(allKeys => {
      allKeys = allKeys || {};
      allKeys[key] = true;
      return Promise.all([this.cache.put(this.prefix + ALL_KEYS, allKeys, this.ttl), this.cache.put(key, value, this.ttl)]);
    });
  }

  getAllClasses() {
    if (!this.ttl) {
      return Promise.resolve(null);
    }

    return this.cache.get(this.prefix + MAIN_SCHEMA);
  }

  setAllClasses(schema) {
    if (!this.ttl) {
      return Promise.resolve(null);
    }

    return this.put(this.prefix + MAIN_SCHEMA, schema);
  }

  setOneSchema(className, schema) {
    if (!this.ttl) {
      return Promise.resolve(null);
    }

    return this.put(this.prefix + className, schema);
  }

  getOneSchema(className) {
    if (!this.ttl) {
      return Promise.resolve(null);
    }

    return this.cache.get(this.prefix + className).then(schema => {
      if (schema) {
        return Promise.resolve(schema);
      }

      return this.cache.get(this.prefix + MAIN_SCHEMA).then(cachedSchemas => {
        cachedSchemas = cachedSchemas || [];
        schema = cachedSchemas.find(cachedSchema => {
          return cachedSchema.className === className;
        });

        if (schema) {
          return Promise.resolve(schema);
        }

        return Promise.resolve(null);
      });
    });
  }

  clear() {
    // That clears all caches...
    return this.cache.get(this.prefix + ALL_KEYS).then(allKeys => {
      if (!allKeys) {
        return;
      }

      const promises = Object.keys(allKeys).map(key => {
        return this.cache.del(key);
      });
      return Promise.all(promises);
    });
  }

}

exports.default = SchemaCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db250cm9sbGVycy9TY2hlbWFDYWNoZS5qcyJdLCJuYW1lcyI6WyJNQUlOX1NDSEVNQSIsIlNDSEVNQV9DQUNIRV9QUkVGSVgiLCJBTExfS0VZUyIsIlNjaGVtYUNhY2hlIiwiY29uc3RydWN0b3IiLCJjYWNoZUNvbnRyb2xsZXIiLCJ0dGwiLCJkZWZhdWx0cyIsInNjaGVtYUNhY2hlVFRMIiwic2luZ2xlQ2FjaGUiLCJwYXJzZUludCIsImNhY2hlIiwicHJlZml4IiwicHV0Iiwia2V5IiwidmFsdWUiLCJnZXQiLCJ0aGVuIiwiYWxsS2V5cyIsIlByb21pc2UiLCJhbGwiLCJnZXRBbGxDbGFzc2VzIiwicmVzb2x2ZSIsInNldEFsbENsYXNzZXMiLCJzY2hlbWEiLCJzZXRPbmVTY2hlbWEiLCJjbGFzc05hbWUiLCJnZXRPbmVTY2hlbWEiLCJjYWNoZWRTY2hlbWFzIiwiZmluZCIsImNhY2hlZFNjaGVtYSIsImNsZWFyIiwicHJvbWlzZXMiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwiZGVsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBSUE7O0FBQ0E7Ozs7QUFMQSxNQUFNQSxXQUFXLEdBQUcsZUFBcEI7QUFDQSxNQUFNQyxtQkFBbUIsR0FBRyxVQUE1QjtBQUNBLE1BQU1DLFFBQVEsR0FBRyxZQUFqQjs7QUFLZSxNQUFNQyxXQUFOLENBQWtCO0FBRy9CQyxFQUFBQSxXQUFXLENBQ1RDLGVBRFMsRUFFVEMsR0FBRyxHQUFHQyxrQkFBU0MsY0FGTixFQUdUQyxXQUFXLEdBQUcsS0FITCxFQUlUO0FBQ0EsU0FBS0gsR0FBTCxHQUFXQSxHQUFYOztBQUNBLFFBQUksT0FBT0EsR0FBUCxJQUFjLFFBQWxCLEVBQTRCO0FBQzFCLFdBQUtBLEdBQUwsR0FBV0ksUUFBUSxDQUFDSixHQUFELENBQW5CO0FBQ0Q7O0FBQ0QsU0FBS0ssS0FBTCxHQUFhTixlQUFiO0FBQ0EsU0FBS08sTUFBTCxHQUFjWCxtQkFBZDs7QUFDQSxRQUFJLENBQUNRLFdBQUwsRUFB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R0FBWCxDQUFlLEtBQUtKLE1BQUwsR0FBY1YsUUFBN0IsRUFBdUNlLElBQXZDLENBQTRDQyxPQUFPLElBQUk7QUFDNUQsVUFBSSxDQUFDQSxPQUFMLEVBQWM7QUFDWjtBQUNEOztBQUNELFlBQU1jLFFBQVEsR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVloQixPQUFaLEVBQXFCaUIsR0FBckIsQ0FBeUJyQixHQUFHLElBQUk7QUFDL0MsZUFBTyxLQUFLSCxLQUFMLENBQVd5QixHQUFYLENBQWV0QixHQUFmLENBQVA7QUFDRCxPQUZnQixDQUFqQjtBQUdBLGFBQU9LLE9BQU8sQ0FBQ0MsR0FBUixDQUFZWSxRQUFaLENBQVA7QUFDRCxLQVJNLENBQVA7QUFTRDs7QUFuRjhCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTUFJTl9TQ0hFTUEgPSAnX19NQUlOX1NDSEVNQSc7XG5jb25zdCBTQ0hFTUFfQ0FDSEVfUFJFRklYID0gJ19fU0NIRU1BJztcbmNvbnN0IEFMTF9LRVlTID0gJ19fQUxMX0tFWVMnO1xuXG5pbXBvcnQgeyByYW5kb21TdHJpbmcgfSBmcm9tICcuLi9jcnlwdG9VdGlscyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY2hlbWFDYWNoZSB7XG4gIGNhY2hlOiBPYmplY3Q7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgY2FjaGVDb250cm9sbGVyLFxuICAgIHR0bCA9IGRlZmF1bHRzLnNjaGVtYUNhY2hlVFRMLFxuICAgIHNpbmdsZUNhY2hlID0gZmFsc2VcbiAgKSB7XG4gICAgdGhpcy50dGwgPSB0dGw7XG4gICAgaWYgKHR5cGVvZiB0dGwgPT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMudHRsID0gcGFyc2VJbnQodHRsKTtcbiAgICB9XG4gICAgdGhpcy5jYWNoZSA9IGNhY2hlQ29udHJvbGxlcjtcbiAgICB0aGlzLnByZWZpeCA9IFNDSEVNQV9DQUNIRV9QUkVGSVg7XG4gICAgaWYgKCFzaW5nbGVDYWNoZSkge1xuICAgICAgdGhpcy5wcmVmaXggKz0gcmFuZG9tU3RyaW5nKDIwKTtcbiAgICB9XG4gIH1cblxuICBwdXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLmNhY2hlLmdldCh0aGlzLnByZWZpeCArIEFMTF9LRVlTKS50aGVuKGFsbEtleXMgPT4ge1xuICAgICAgYWxsS2V5cyA9IGFsbEtleXMgfHwge307XG4gICAgICBhbGxLZXlzW2tleV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtcbiAgICAgICAgdGhpcy5jYWNoZS5wdXQodGhpcy5wcmVmaXggKyBBTExfS0VZUywgYWxsS2V5cywgdGhpcy50dGwpLFxuICAgICAgICB0aGlzLmNhY2hlLnB1dChrZXksIHZhbHVlLCB0aGlzLnR0bCksXG4gICAgICBdKTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldEFsbENsYXNzZXMoKSB7XG4gICAgaWYgKCF0aGlzLnR0bCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0KHRoaXMucHJlZml4ICsgTUFJTl9TQ0hFTUEpO1xuICB9XG5cbiAgc2V0QWxsQ2xhc3NlcyhzY2hlbWEpIHtcbiAgICBpZiAoIXRoaXMudHRsKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wdXQodGhpcy5wcmVmaXggKyBNQUlOX1NDSEVNQSwgc2NoZW1hKTtcbiAgfVxuXG4gIHNldE9uZVNjaGVtYShjbGFzc05hbWUsIHNjaGVtYSkge1xuICAgIGlmICghdGhpcy50dGwpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnB1dCh0aGlzLnByZWZpeCArIGNsYXNzTmFtZSwgc2NoZW1hKTtcbiAgfVxuXG4gIGdldE9uZVNjaGVtYShjbGFzc05hbWUpIHtcbiAgICBpZiAoIXRoaXMudHRsKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jYWNoZS5nZXQodGhpcy5wcmVmaXggKyBjbGFzc05hbWUpLnRoZW4oc2NoZW1hID0+IHtcbiAgICAgIGlmIChzY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzY2hlbWEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0KHRoaXMucHJlZml4ICsgTUFJTl9TQ0hFTUEpLnRoZW4oY2FjaGVkU2NoZW1hcyA9PiB7XG4gICAgICAgIGNhY2hlZFNjaGVtYXMgPSBjYWNoZWRTY2hlbWFzIHx8IFtdO1xuICAgICAgICBzY2hlbWEgPSBjYWNoZWRTY2hlbWFzLmZpbmQoY2FjaGVkU2NoZW1hID0+IHtcbiAgICAgICAgICByZXR1cm4gY2FjaGVkU2NoZW1hLmNsYXNzTmFtZSA9PT0gY2xhc3NOYW1lO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHNjaGVtYSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc2NoZW1hKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICAvLyBUaGF0IGNsZWFycyBhbGwgY2FjaGVzLi4uXG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0KHRoaXMucHJlZml4ICsgQUxMX0tFWVMpLnRoZW4oYWxsS2V5cyA9PiB7XG4gICAgICBpZiAoIWFsbEtleXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgcHJvbWlzZXMgPSBPYmplY3Qua2V5cyhhbGxLZXlzKS5tYXAoa2V5ID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGUuZGVsKGtleSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==