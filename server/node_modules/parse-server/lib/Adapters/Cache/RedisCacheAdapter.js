"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RedisCacheAdapter = void 0;

var _redis = _interopRequireDefault(require("redis"));

var _logger = _interopRequireDefault(require("../../logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_REDIS_TTL = 30 * 1000; // 30 seconds in milliseconds

function debug() {
  _logger.default.debug.apply(_logger.default, ['RedisCacheAdapter', ...arguments]);
}

class RedisCacheAdapter {
  constructor(redisCtx, ttl = DEFAULT_REDIS_TTL) {
    this.client = _redis.default.createClient(redisCtx);
    this.p = Promise.resolve();
    this.ttl = ttl;
  }

  get(key) {
    debug('get', key);
    this.p = this.p.then(() => {
      return new Promise(resolve => {
        this.client.get(key, function (err, res) {
          debug('-> get', key, res);

          if (!res) {
            return resolve(null);
          }

          resolve(JSON.parse(res));
        });
      });
    });
    return this.p;
  }

  put(key, value, ttl = this.ttl) {
    value = JSON.stringify(value);
    debug('put', key, value, ttl);

    if (ttl === 0) {
      return this.p; // ttl of zero is a logical no-op, but redis cannot set expire time of zero
    }

    if (ttl < 0 || isNaN(ttl)) {
      ttl = DEFAULT_REDIS_TTL;
    }

    this.p = this.p.then(() => {
      return new Promise(resolve => {
        if (ttl === Infinity) {
          this.client.set(key, value, function () {
            resolve();
          });
        } else {
          this.client.psetex(key, ttl, value, function () {
            resolve();
          });
        }
      });
    });
    return this.p;
  }

  del(key) {
    debug('del', key);
    this.p = this.p.then(() => {
      return new Promise(resolve => {
        this.client.del(key, function () {
          resolve();
        });
      });
    });
    return this.p;
  }

  clear() {
    debug('clear');
    this.p = this.p.then(() => {
      return new Promise(resolve => {
        this.client.flushdb(function () {
          resolve();
        });
      });
    });
    return this.p;
  }

}

exports.RedisCacheAdapter = RedisCacheAdapter;
var _default = RedisCacheAdapter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9DYWNoZS9SZWRpc0NhY2hlQWRhcHRlci5qcyJdLCJuYW1lcyI6WyJERUZBVUxUX1JFRElTX1RUTCIsImRlYnVnIiwibG9nZ2VyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJSZWRpc0NhY2hlQWRhcHRlciIsImNvbnN0cnVjdG9yIiwicmVkaXNDdHgiLCJ0dGwiLCJjbGllbnQiLCJyZWRpcyIsImNyZWF0ZUNsaWVudCIsInAiLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldCIsImtleSIsInRoZW4iLCJlcnIiLCJyZXMiLCJKU09OIiwicGFyc2UiLCJwdXQiLCJ2YWx1ZSIsInN0cmluZ2lmeSIsImlzTmFOIiwiSW5maW5pdHkiLCJzZXQiLCJwc2V0ZXgiLCJkZWwiLCJjbGVhciIsImZsdXNoZGIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVBLE1BQU1BLGlCQUFpQixHQUFHLEtBQUssSUFBL0IsQyxDQUFxQzs7QUFFckMsU0FBU0MsS0FBVCxHQUFpQjtBQUNmQyxrQkFBT0QsS0FBUCxDQUFhRSxLQUFiLENBQW1CRCxlQUFuQixFQUEyQixDQUFDLG1CQUFELEVBQXNCLEdBQUdFLFNBQXpCLENBQTNCO0FBQ0Q7O0FBRU0sTUFBTUMsaUJBQU4sQ0FBd0I7QUFDN0JDLEVBQUFBLFdBQVcsQ0FBQ0MsUUFBRCxFQUFXQyxHQUFHLEdBQUdSLGlCQUFqQixFQUFvQztBQUM3QyxTQUFLUyxNQUFMLEdBQWNDLGVBQU1DLFlBQU4sQ0FBbUJKLFFBQW5CLENBQWQ7QUFDQSxTQUFLSyxDQUFMLEdBQVNDLE9BQU8sQ0FBQ0MsT0FBUixFQUFUO0FBQ0EsU0FBS04sR0FBTCxHQUFXQSxHQUFYO0FBQ0Q7O0FBRURPLEVBQUFBLEdBQUcsQ0FBQ0MsR0FBRCxFQUFNO0FBQ1BmLElBQUFBLEtBQUssQ0FBQyxLQUFELEVBQVFlLEdBQVIsQ0FBTDtBQUNBLFNBQUtKLENBQUwsR0FBUyxLQUFLQSxDQUFMLENBQU9LLElBQVAsQ0FB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ZnJvbSAnLi4vLi4vbG9nZ2VyJztcblxuY29uc3QgREVGQVVMVF9SRURJU19UVEwgPSAzMCAqIDEwMDA7IC8vIDMwIHNlY29uZHMgaW4gbWlsbGlzZWNvbmRzXG5cbmZ1bmN0aW9uIGRlYnVnKCkge1xuICBsb2dnZXIuZGVidWcuYXBwbHkobG9nZ2VyLCBbJ1JlZGlzQ2FjaGVBZGFwdGVyJywgLi4uYXJndW1lbnRzXSk7XG59XG5cbmV4cG9ydCBjbGFzcyBSZWRpc0NhY2hlQWRhcHRlciB7XG4gIGNvbnN0cnVjdG9yKHJlZGlzQ3R4LCB0dGwgPSBERUZBVUxUX1JFRElTX1RUTCkge1xuICAgIHRoaXMuY2xpZW50ID0gcmVkaXMuY3JlYXRlQ2xpZW50KHJlZGlzQ3R4KTtcbiAgICB0aGlzLnAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB0aGlzLnR0bCA9IHR0bDtcbiAgfVxuXG4gIGdldChrZXkpIHtcbiAgICBkZWJ1ZygnZ2V0Jywga2V5KTtcbiAgICB0aGlzLnAgPSB0aGlzLnAudGhlbigoKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRoaXMuY2xpZW50LmdldChrZXksIGZ1bmN0aW9uKGVyciwgcmVzKSB7XG4gICAgICAgICAgZGVidWcoJy0+IGdldCcsIGtleSwgcmVzKTtcbiAgICAgICAgICBpZiAoIXJlcykge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShyZXMpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5wO1xuICB9XG5cbiAgcHV0KGtleSwgdmFsdWUsIHR0bCA9IHRoaXMudHRsKSB7XG4gICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgZGVidWcoJ3B1dCcsIGtleSwgdmFsdWUsIHR0bCk7XG4gICAgaWYgKHR0bCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMucDsgLy8gdHRsIG9mIHplcm8gaXMgYSBsb2dpY2FsIG5vLW9wLCBidXQgcmVkaXMgY2Fubm90IHNldCBleHBpcmUgdGltZSBvZiB6ZXJvXG4gICAgfVxuICAgIGlmICh0dGwgPCAwIHx8IGlzTmFOKHR0bCkpIHtcbiAgICAgIHR0bCA9IERFRkFVTFRfUkVESVNfVFRMO1xuICAgIH1cbiAgICB0aGlzLnAgPSB0aGlzLnAudGhlbigoKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIGlmICh0dGwgPT09IEluZmluaXR5KSB7XG4gICAgICAgICAgdGhpcy5jbGllbnQuc2V0KGtleSwgdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY2xpZW50LnBzZXRleChrZXksIHR0bCwgdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5wO1xuICB9XG5cbiAgZGVsKGtleSkge1xuICAgIGRlYnVnKCdkZWwnLCBrZXkpO1xuICAgIHRoaXMucCA9IHRoaXMucC50aGVuKCgpID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdGhpcy5jbGllbnQuZGVsKGtleSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnA7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICBkZWJ1ZygnY2xlYXInKTtcbiAgICB0aGlzLnAgPSB0aGlzLnAudGhlbigoKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRoaXMuY2xpZW50LmZsdXNoZGIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnA7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVkaXNDYWNoZUFkYXB0ZXI7XG4iXX0=