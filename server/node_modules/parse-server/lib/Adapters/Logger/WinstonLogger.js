"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureLogger = configureLogger;
exports.addTransport = addTransport;
exports.removeTransport = removeTransport;
exports.default = exports.logger = void 0;

var _winston = _interopRequireDefault(require("winston"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _winstonDailyRotateFile = _interopRequireDefault(require("winston-daily-rotate-file"));

var _lodash = _interopRequireDefault(require("lodash"));

var _defaults = _interopRequireDefault(require("../../defaults"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const logger = new _winston.default.Logger();
exports.logger = logger;
const additionalTransports = [];

function updateTransports(options) {
  const transports = Object.assign({}, logger.transports);

  if (options) {
    const silent = options.silent;
    delete options.silent;

    if (_lodash.default.isNull(options.dirname)) {
      delete transports['parse-server'];
      delete transports['parse-server-error'];
    } else if (!_lodash.default.isUndefined(options.dirname)) {
      transports['parse-server'] = new _winstonDailyRotateFile.default(Object.assign({}, {
        filename: 'parse-server.info',
        name: 'parse-server'
      }, options, {
        timestamp: true
      }));
      transports['parse-server-error'] = new _winstonDailyRotateFile.default(Object.assign({}, {
        filename: 'parse-server.err',
        name: 'parse-server-error'
      }, options, {
        level: 'error',
        timestamp: true
      }));
    }

    transports.console = new _winston.default.transports.Console(Object.assign({
      colorize: true,
      name: 'console',
      silent
    }, options));
  } // Mount the additional transports


  additionalTransports.forEach(transport => {
    transports[transport.name] = transport;
  });
  logger.configure({
    transports: _lodash.default.values(transports)
  });
}

function configureLogger({
  logsFolder = _defaults.default.logsFolder,
  jsonLogs = _defaults.default.jsonLogs,
  logLevel = _winston.default.level,
  verbose = _defaults.default.verbose,
  silent = _defaults.default.silent
} = {}) {
  if (verbose) {
    logLevel = 'verbose';
  }

  _winston.default.level = logLevel;
  const options = {};

  if (logsFolder) {
    if (!_path.default.isAbsolute(logsFolder)) {
      logsFolder = _path.default.resolve(process.cwd(), logsFolder);
    }

    try {
      _fs.default.mkdirSync(logsFolder);
    } catch (e) {
      /* */
    }
  }

  options.dirname = logsFolder;
  options.level = logLevel;
  options.silent = silent;

  if (jsonLogs) {
    options.json = true;
    options.stringify = true;
  }

  updateTransports(options);
}

function addTransport(transport) {
  additionalTransports.push(transport);
  updateTransports();
}

function removeTransport(transport) {
  const transportName = typeof transport == 'string' ? transport : transport.name;
  const transports = Object.assign({}, logger.transports);
  delete transports[transportName];
  logger.configure({
    transports: _lodash.default.values(transports)
  });

  _lodash.default.remove(additionalTransports, transport => {
    return transport.name === transportName;
  });
}

var _default = logger;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,