"use strict";

// Helper functions for accessing the google API.
var Parse = require('parse/node').Parse;

const httpsRequest = require('./httpsRequest');

function validateIdToken(id, token) {
  return googleRequest('tokeninfo?id_token=' + token).then(response => {
    if (response && (response.sub == id || response.user_id == id)) {
      return;
    }

    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Google auth is invalid for this user.');
  });
}

function validateAuthToken(id, token) {
  return googleRequest('tokeninfo?access_token=' + token).then(response => {
    if (response && (response.sub == id || response.user_id == id)) {
      return;
    }

    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Google auth is invalid for this user.');
  });
} // Returns a promise that fulfills if this user id is valid.


function validateAuthData(authData) {
  if (authData.id_token) {
    return validateIdToken(authData.id, authData.id_token);
  } else {
    return validateAuthToken(authData.id, authData.access_token).then(() => {
      // Validation with auth token worked
      return;
    }, () => {
      // Try with the id_token param
      return validateIdToken(authData.id, authData.access_token);
    });
  }
} // Returns a promise that fulfills if this app id is valid.


function validateAppId() {
  return Promise.resolve();
} // A promisey wrapper for api requests


function googleRequest(path) {
  return httpsRequest.get('https://www.googleapis.com/oauth2/v3/' + path);
}

module.exports = {
  validateAppId: validateAppId,
  validateAuthData: validateAuthData
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2dvb2dsZS5qcyJdLCJuYW1lcyI6WyJQYXJzZSIsInJlcXVpcmUiLCJodHRwc1JlcXVlc3QiLCJ2YWxpZGF0ZUlkVG9rZW4iLCJpZCIsInRva2VuIiwiZ29vZ2xlUmVxdWVzdCIsInRoZW4iLCJyZXNwb25zZSIsInN1YiIsInVzZXJfaWQiLCJFcnJvciIsIk9CSkVDVF9OT1RfRk9VTkQiLCJ2YWxpZGF0ZUF1dGhUb2tlbiIsInZhbGlkYXRlQXV0aERhdGEiLCJhdXRoRGF0YSIsImlkX3Rva2VuIiwiYWNjZXNzX3Rva2VuIiwidmFsaWRhdGVBcHBJZCIsIlByb21pc2UiLCJyZXNvbHZlIiwicGF0aCIsImdldCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSxJQUFJQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxZQUFELENBQVAsQ0FBc0JELEtBQWxDOztBQUNBLE1BQU1FLFlBQVksR0FBR0QsT0FBTyxDQUFDLGdCQUFELENBQTVCOztBQUVBLFNBQVNFLGVBQVQsQ0FBeUJDLEVBQXpCLEVBQTZCQyxLQUE3QixFQUFvQztBQUNsQyxTQUFPQyxhQUFhLENBQUMsd0JBQXdCRCxLQUF6QixDQUFiLENBQTZDRSxJQUE3QyxDQUFrREMsUUFBUSxJQUFJO0FBQ25FLFFBQUlBLFFBQVEsS0FBS0EsUUFBUSxDQUFDQyxHQUFULElBQWdCTCxFQUFoQixJQUFzQkksUUFBUSxDQUFDRSxPQUFULElBQW9CTixFQUEvQyxDQUFaLEVBQWdFO0FBQzlEO0FBQ0Q7O0FBQ0QsVUFBTSxJQUFJSixLQUFLLENBQUNXLEtBQVYsQ0FDSlgsS0FBSyxDQUFDVyxLQUFOLENBQVlDLGdCQURSLEVBRUosdUNBRkksQ0FBTjtBQUlELEdBUk0sQ0FBUDtBQVNEOztBQUVELFNBQVNDLGlCQUFULENBQTJCVCxFQUEzQixFQUErQkMsS0FBL0IsRUFBc0M7QUFDcEMsU0FBT0MsYUFBYSxDQUFDLDRCQUE0QkQsS0FBN0IsQ0FBYixDQUFpREUsSUFBakQsQ0FBc0RDLFFBQVEsSUFBSTtBQUN2RSxRQUFJQSxRQUFRLEtBQUtBLFFBQVEsQ0FBQ0MsR0FBVCxJQUFnQkwsRUFBaEIsSUFBc0JJLFFBQVEsQ0FBQ0UsT0FBVCxJQUFvQk4sRUFBL0MsQ0FBWixFQUFnRTtBQUM5RDtBQUNEOztBQUNELFVBQU0sSUFBSUosS0FBSyxDQUFDVyxLQUFWLENBQ0pYLEtBQUssQ0FBQ1csS0FBTixDQUFZQyxnQkFEUixFQUVKLHVDQUZJLENBQU47QUFJRCxHQVJNLENBQVA7QUFTRCxDLENBRUQ7OztBQUNBLFNBQVNFLGdCQUFULENBQTBCQyxRQUExQixFQUFvQztBQUNsQyxNQUFJQSxRQUFRLENBQUNDLFFBQWIsRUFBdUI7QUFDckIsV0FBT2IsZUFBZSxDQUFDWSxRQUFRLENBQUNYLEVBQVYsRUFBY1csUUFBUSxDQUFDQyxRQUF2QixDQUF0QjtBQUNELEdBRkQsTUFFTztBQUNMLFdBQU9ILGlCQUFpQixDQUFDRSxRQUFRLENBQUNYLEVBQVYsRUFBY1csUUFBUSxDQUFDRSxZQUF2QixDQUFqQixDQUFzRFYsSUFBdEQsQ0FDTCxNQUFNO0FBQ0o7QUFDQTtBQUNELEtBSkksRUFLTCxNQUFNO0FBQ0o7QUFDQSxhQUFPSixlQUFlLENBQUNZLFFBQVEsQ0FBQ1gsRUFBVixFQUFjVyxRQUFRLENBQUNFLFlBQXZCLENBQXRCO0FBQ0QsS0FSSSxDQUFQO0FBVUQ7QUFDRixDLENBRUQ7OztBQUNBLFNBQVNDLGFBQVQsR0FBeUI7QUFDdkIsU0FBT0MsT0FBTyxDQUFDQyxPQUFSLEVBQVA7QUFDRCxDLENBRUQ7OztBQUNBLFNBQVNkLGFBQVQsQ0FBdUJlLElBQXZCLEVBQTZCO0FBQzNCLFNBQU9uQixZQUFZLENBQUNvQixHQUFiLENBQWlCLDBDQUEwQ0QsSUFBM0QsQ0FBUDtBQUNEOztBQUVERSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZk4sRUFBQUEsYUFBYSxFQUFFQSxhQURBO0FBRWZKLEVBQUFBLGdCQUFnQixFQUFFQTtBQUZILENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSGVscGVyIGZ1bmN0aW9ucyBmb3IgYWNjZXNzaW5nIHRoZSBnb29nbGUgQVBJLlxudmFyIFBhcnNlID0gcmVxdWlyZSgncGFyc2Uvbm9kZScpLlBhcnNlO1xuY29uc3QgaHR0cHNSZXF1ZXN0ID0gcmVxdWlyZSgnLi9odHRwc1JlcXVlc3QnKTtcblxuZnVuY3Rpb24gdmFsaWRhdGVJZFRva2VuKGlkLCB0b2tlbikge1xuICByZXR1cm4gZ29vZ2xlUmVxdWVzdCgndG9rZW5pbmZvP2lkX3Rva2VuPScgKyB0b2tlbikudGhlbihyZXNwb25zZSA9PiB7XG4gICAgaWYgKHJlc3BvbnNlICYmIChyZXNwb25zZS5zdWIgPT0gaWQgfHwgcmVzcG9uc2UudXNlcl9pZCA9PSBpZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCxcbiAgICAgICdHb29nbGUgYXV0aCBpcyBpbnZhbGlkIGZvciB0aGlzIHVzZXIuJ1xuICAgICk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUF1dGhUb2tlbihpZCwgdG9rZW4pIHtcbiAgcmV0dXJuIGdvb2dsZVJlcXVlc3QoJ3Rva2VuaW5mbz9hY2Nlc3NfdG9rZW49JyArIHRva2VuKS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICBpZiAocmVzcG9uc2UgJiYgKHJlc3BvbnNlLnN1YiA9PSBpZCB8fCByZXNwb25zZS51c2VyX2lkID09IGlkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICBQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELFxuICAgICAgJ0dvb2dsZSBhdXRoIGlzIGludmFsaWQgZm9yIHRoaXMgdXNlci4nXG4gICAgKTtcbiAgfSk7XG59XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgaWYgdGhpcyB1c2VyIGlkIGlzIHZhbGlkLlxuZnVuY3Rpb24gdmFsaWRhdGVBdXRoRGF0YShhdXRoRGF0YSkge1xuICBpZiAoYXV0aERhdGEuaWRfdG9rZW4pIHtcbiAgICByZXR1cm4gdmFsaWRhdGVJZFRva2VuKGF1dGhEYXRhLmlkLCBhdXRoRGF0YS5pZF90b2tlbik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbGlkYXRlQXV0aFRva2VuKGF1dGhEYXRhLmlkLCBhdXRoRGF0YS5hY2Nlc3NfdG9rZW4pLnRoZW4oXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIFZhbGlkYXRpb24gd2l0aCBhdXRoIHRva2VuIHdvcmtlZFxuICAgICAgICByZXR1cm47XG4gICAgICB9LFxuICAgICAgKCkgPT4ge1xuICAgICAgICAvLyBUcnkgd2l0aCB0aGUgaWRfdG9rZW4gcGFyYW1cbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlSWRUb2tlbihhdXRoRGF0YS5pZCwgYXV0aERhdGEuYWNjZXNzX3Rva2VuKTtcbiAgICAgIH1cbiAgICApO1xuICB9XG59XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgaWYgdGhpcyBhcHAgaWQgaXMgdmFsaWQuXG5mdW5jdGlvbiB2YWxpZGF0ZUFwcElkKCkge1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59XG5cbi8vIEEgcHJvbWlzZXkgd3JhcHBlciBmb3IgYXBpIHJlcXVlc3RzXG5mdW5jdGlvbiBnb29nbGVSZXF1ZXN0KHBhdGgpIHtcbiAgcmV0dXJuIGh0dHBzUmVxdWVzdC5nZXQoJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My8nICsgcGF0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB2YWxpZGF0ZUFwcElkOiB2YWxpZGF0ZUFwcElkLFxuICB2YWxpZGF0ZUF1dGhEYXRhOiB2YWxpZGF0ZUF1dGhEYXRhLFxufTtcbiJdfQ==