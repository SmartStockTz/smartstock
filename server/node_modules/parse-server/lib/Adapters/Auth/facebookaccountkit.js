"use strict";

const crypto = require('crypto');

const httpsRequest = require('./httpsRequest');

const Parse = require('parse/node').Parse;

const graphRequest = path => {
  return httpsRequest.get(`https://graph.accountkit.com/v1.1/${path}`);
};

function getRequestPath(authData, options) {
  const access_token = authData.access_token,
        appSecret = options && options.appSecret;

  if (appSecret) {
    const appsecret_proof = crypto.createHmac('sha256', appSecret).update(access_token).digest('hex');
    return `me?access_token=${access_token}&appsecret_proof=${appsecret_proof}`;
  }

  return `me?access_token=${access_token}`;
}

function validateAppId(appIds, authData, options) {
  if (!appIds.length) {
    return Promise.reject(new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Facebook app id for Account Kit is not configured.'));
  }

  return graphRequest(getRequestPath(authData, options)).then(data => {
    if (data && data.application && appIds.indexOf(data.application.id) != -1) {
      return;
    }

    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Facebook app id for Account Kit is invalid for this user.');
  });
}

function validateAuthData(authData, options) {
  return graphRequest(getRequestPath(authData, options)).then(data => {
    if (data && data.error) {
      throw data.error;
    }

    if (data && data.id == authData.id) {
      return;
    }

    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Facebook Account Kit auth is invalid for this user.');
  });
}

module.exports = {
  validateAppId,
  validateAuthData
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2ZhY2Vib29rYWNjb3VudGtpdC5qcyJdLCJuYW1lcyI6WyJjcnlwdG8iLCJyZXF1aXJlIiwiaHR0cHNSZXF1ZXN0IiwiUGFyc2UiLCJncmFwaFJlcXVlc3QiLCJwYXRoIiwiZ2V0IiwiZ2V0UmVxdWVzdFBhdGgiLCJhdXRoRGF0YSIsIm9wdGlvbnMiLCJhY2Nlc3NfdG9rZW4iLCJhcHBTZWNyZXQiLCJhcHBzZWNyZXRfcHJvb2YiLCJjcmVhdGVIbWFjIiwidXBkYXRlIiwiZGlnZXN0IiwidmFsaWRhdGVBcHBJZCIsImFwcElkcyIsImxlbmd0aCIsIlByb21pc2UiLCJyZWplY3QiLCJFcnJvciIsIk9CSkVDVF9OT1RfRk9VTkQiLCJ0aGVuIiwiZGF0YSIsImFwcGxpY2F0aW9uIiwiaW5kZXhPZiIsImlkIiwidmFsaWRhdGVBdXRoRGF0YSIsImVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQXRCOztBQUNBLE1BQU1DLFlBQVksR0FBR0QsT0FBTyxDQUFDLGdCQUFELENBQTVCOztBQUNBLE1BQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFDLFlBQUQsQ0FBUCxDQUFzQkUsS0FBcEM7O0FBRUEsTUFBTUMsWUFBWSxHQUFHQyxJQUFJLElBQUk7QUFDM0IsU0FBT0gsWUFBWSxDQUFDSSxHQUFiLENBQWtCLHFDQUFvQ0QsSUFBSyxFQUEzRCxDQUFQO0FBQ0QsQ0FGRDs7QUFJQSxTQUFTRSxjQUFULENBQXdCQyxRQUF4QixFQUFrQ0MsT0FBbEMsRUFBMkM7QUFDekMsUUFBTUMsWUFBWSxHQUFHRixRQUFRLENBQUNFLFlBQTlCO0FBQUEsUUFDRUMsU0FBUyxHQUFHRixPQUFPLElBQUlBLE9BQU8sQ0FBQ0UsU0FEakM7O0FBRUEsTUFBSUEsU0FBSixFQUFlO0FBQ2IsVUFBTUMsZUFBZSxHQUFHWixNQUFNLENBQzNCYSxVQURxQixDQUNWLFFBRFUsRUFDQUYsU0FEQSxFQUVyQkcsTUFGcUIsQ0FFZEosWUFGYyxFQUdyQkssTUFIcUIsQ0FHZCxLQUhjLENBQXhCO0FBSUEsV0FBUSxtQkFBa0JMLFlBQWEsb0JBQW1CRSxlQUFnQixFQUExRTtBQUNEOztBQUNELFNBQVEsbUJBQWtCRixZQUFhLEVBQXZDO0FBQ0Q7O0FBRUQsU0FBU00sYUFBVCxDQUF1QkMsTUFBdkIsRUFBK0JULFFBQS9CLEVBQXlDQyxPQUF6QyxFQUFrRDtBQUNoRCxNQUFJLENBQUNRLE1BQU0sQ0FBQ0MsTUFBWixFQUFvQjtBQUNsQixXQUFPQyxPQUFPLENBQUNDLE1BQVIsQ0FDTCxJQUFJakIsS0FBSyxDQUFDa0IsS0FBVixDQUNFbEIsS0FBSyxDQUFDa0IsS0FBTixDQUFZQyxnQkFEZCxFQUVFLG9EQUZGLENBREssQ0FBUDtBQU1EOztBQUNELFNBQU9sQixZQUFZLENBQUNHLGNBQWMsQ0FBQ0MsUUFBRCxFQUFXQyxPQUFYLENBQWYsQ0FBWixDQUFnRGMsSUFBaEQsQ0FBcURDLElBQUksSUFBSTtBQUNsRSxRQUFJQSxJQUFJLElBQUlBLElBQUksQ0FBQ0MsV0FBYixJQUE0QlIsTUFBTSxDQUFDUyxPQUFQLENBQWVGLElBQUksQ0FBQ0MsV0FBTCxDQUFpQkUsRUFBaEMsS0FBdUMsQ0FBQyxDQUF4RSxFQUEyRTtBQUN6RTtBQUNEOztBQUNELFVBQU0sSUFBSXhCLEtBQUssQ0FBQ2tCLEtBQVYsQ0FDSmxCLEtBQUssQ0FBQ2tCLEtBQU4sQ0FBWUMsZ0JBRFIsRUFFSiwyREFGSSxDQUFOO0FBSUQsR0FSTSxDQUFQO0FBU0Q7O0FBRUQsU0FBU00sZ0JBQVQsQ0FBMEJwQixRQUExQixFQUFvQ0MsT0FBcEMsRUFBNkM7QUFDM0MsU0FBT0wsWUFBWSxDQUFDRyxjQUFjLENBQUNDLFFBQUQsRUFBV0MsT0FBWCxDQUFmLENBQVosQ0FBZ0RjLElBQWhELENBQXFEQyxJQUFJLElBQUk7QUFDbEUsUUFBSUEsSUFBSSxJQUFJQSxJQUFJLENBQUNLLEtBQWpCLEVBQXdCO0FBQ3RCLFlBQU1MLElBQUksQ0FBQ0ssS0FBWDtBQUNEOztBQUNELFFBQUlMLElBQUksSUFBSUEsSUFBSSxDQUFDRyxFQUFMLElBQVduQixRQUFRLENBQUNtQixFQUFoQyxFQUFvQztBQUNsQztBQUNEOztBQUNELFVBQU0sSUFBSXhCLEtBQUssQ0FBQ2tCLEtBQVYsQ0FDSmxCLEtBQUssQ0FBQ2tCLEtBQU4sQ0FBWUMsZ0JBRFIsRUFFSixxREFGSSxDQUFOO0FBSUQsR0FYTSxDQUFQO0FBWUQ7O0FBRURRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmZixFQUFBQSxhQURlO0FBRWZZLEVBQUFBO0FBRmUsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbmNvbnN0IGh0dHBzUmVxdWVzdCA9IHJlcXVpcmUoJy4vaHR0cHNSZXF1ZXN0Jyk7XG5jb25zdCBQYXJzZSA9IHJlcXVpcmUoJ3BhcnNlL25vZGUnKS5QYXJzZTtcblxuY29uc3QgZ3JhcGhSZXF1ZXN0ID0gcGF0aCA9PiB7XG4gIHJldHVybiBodHRwc1JlcXVlc3QuZ2V0KGBodHRwczovL2dyYXBoLmFjY291bnRraXQuY29tL3YxLjEvJHtwYXRofWApO1xufTtcblxuZnVuY3Rpb24gZ2V0UmVxdWVzdFBhdGgoYXV0aERhdGEsIG9wdGlvbnMpIHtcbiAgY29uc3QgYWNjZXNzX3Rva2VuID0gYXV0aERhdGEuYWNjZXNzX3Rva2VuLFxuICAgIGFwcFNlY3JldCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5hcHBTZWNyZXQ7XG4gIGlmIChhcHBTZWNyZXQpIHtcbiAgICBjb25zdCBhcHBzZWNyZXRfcHJvb2YgPSBjcnlwdG9cbiAgICAgIC5jcmVhdGVIbWFjKCdzaGEyNTYnLCBhcHBTZWNyZXQpXG4gICAgICAudXBkYXRlKGFjY2Vzc190b2tlbilcbiAgICAgIC5kaWdlc3QoJ2hleCcpO1xuICAgIHJldHVybiBgbWU/YWNjZXNzX3Rva2VuPSR7YWNjZXNzX3Rva2VufSZhcHBzZWNyZXRfcHJvb2Y9JHthcHBzZWNyZXRfcHJvb2Z9YDtcbiAgfVxuICByZXR1cm4gYG1lP2FjY2Vzc190b2tlbj0ke2FjY2Vzc190b2tlbn1gO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUFwcElkKGFwcElkcywgYXV0aERhdGEsIG9wdGlvbnMpIHtcbiAgaWYgKCFhcHBJZHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgICBQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELFxuICAgICAgICAnRmFjZWJvb2sgYXBwIGlkIGZvciBBY2NvdW50IEtpdCBpcyBub3QgY29uZmlndXJlZC4nXG4gICAgICApXG4gICAgKTtcbiAgfVxuICByZXR1cm4gZ3JhcGhSZXF1ZXN0KGdldFJlcXVlc3RQYXRoKGF1dGhEYXRhLCBvcHRpb25zKSkudGhlbihkYXRhID0+IHtcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmFwcGxpY2F0aW9uICYmIGFwcElkcy5pbmRleE9mKGRhdGEuYXBwbGljYXRpb24uaWQpICE9IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgIFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsXG4gICAgICAnRmFjZWJvb2sgYXBwIGlkIGZvciBBY2NvdW50IEtpdCBpcyBpbnZhbGlkIGZvciB0aGlzIHVzZXIuJ1xuICAgICk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUF1dGhEYXRhKGF1dGhEYXRhLCBvcHRpb25zKSB7XG4gIHJldHVybiBncmFwaFJlcXVlc3QoZ2V0UmVxdWVzdFBhdGgoYXV0aERhdGEsIG9wdGlvbnMpKS50aGVuKGRhdGEgPT4ge1xuICAgIGlmIChkYXRhICYmIGRhdGEuZXJyb3IpIHtcbiAgICAgIHRocm93IGRhdGEuZXJyb3I7XG4gICAgfVxuICAgIGlmIChkYXRhICYmIGRhdGEuaWQgPT0gYXV0aERhdGEuaWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCxcbiAgICAgICdGYWNlYm9vayBBY2NvdW50IEtpdCBhdXRoIGlzIGludmFsaWQgZm9yIHRoaXMgdXNlci4nXG4gICAgKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB2YWxpZGF0ZUFwcElkLFxuICB2YWxpZGF0ZUF1dGhEYXRhLFxufTtcbiJdfQ==