"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParseServerRESTController = ParseServerRESTController;
exports.default = void 0;

const Config = require('./Config');

const Auth = require('./Auth');

const RESTController = require('parse/lib/node/RESTController');

const URL = require('url');

const Parse = require('parse/node');

function getSessionToken(options) {
  if (options && typeof options.sessionToken === 'string') {
    return Promise.resolve(options.sessionToken);
  }

  return Promise.resolve(null);
}

function getAuth(options = {}, config) {
  const installationId = options.installationId || 'cloud';

  if (options.useMasterKey) {
    return Promise.resolve(new Auth.Auth({
      config,
      isMaster: true,
      installationId
    }));
  }

  return getSessionToken(options).then(sessionToken => {
    if (sessionToken) {
      options.sessionToken = sessionToken;
      return Auth.getAuthForSessionToken({
        config,
        sessionToken: sessionToken,
        installationId
      });
    } else {
      return Promise.resolve(new Auth.Auth({
        config,
        installationId
      }));
    }
  });
}

function ParseServerRESTController(applicationId, router) {
  function handleRequest(method, path, data = {}, options = {}) {
    // Store the arguments, for later use if internal fails
    const args = arguments;
    const config = Config.get(applicationId);
    const serverURL = URL.parse(config.serverURL);

    if (path.indexOf(serverURL.path) === 0) {
      path = path.slice(serverURL.path.length, path.length);
    }

    if (path[0] !== '/') {
      path = '/' + path;
    }

    if (path === '/batch') {
      const promises = data.requests.map(request => {
        return handleRequest(request.method, request.path, request.body, options).then(response => {
          return Promise.resolve({
            success: response
          });
        }, error => {
          return Promise.resolve({
            error: {
              code: error.code,
              error: error.message
            }
          });
        });
      });
      return Promise.all(promises);
    }

    let query;

    if (method === 'GET') {
      query = data;
    }

    return new Promise((resolve, reject) => {
      getAuth(options, config).then(auth => {
        const request = {
          body: data,
          config,
          auth,
          info: {
            applicationId: applicationId,
            sessionToken: options.sessionToken
          },
          query
        };
        return Promise.resolve().then(() => {
          return router.tryRouteRequest(method, path, request);
        }).then(response => {
          resolve(response.response, response.status, response);
        }, err => {
          if (err instanceof Parse.Error && err.code == Parse.Error.INVALID_JSON && err.message == `cannot route ${method} ${path}`) {
            RESTController.request.apply(null, args).then(resolve, reject);
          } else {
            reject(err);
          }
        });
      }, reject);
    });
  }

  return {
    request: handleRequest,
    ajax: RESTController.ajax
  };
}

var _default = ParseServerRESTController;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9QYXJzZVNlcnZlclJFU1RDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbIkNvbmZpZyIsInJlcXVpcmUiLCJBdXRoIiwiUkVTVENvbnRyb2xsZXIiLCJVUkwiLCJQYXJzZSIsImdldFNlc3Npb25Ub2tlbiIsIm9wdGlvbnMiLCJzZXNzaW9uVG9rZW4iLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldEF1dGgiLCJjb25maWciLCJpbnN0YWxsYXRpb25JZCIsInVzZU1hc3RlcktleSIsImlzTWFzdGVyIiwidGhlbiIsImdldEF1dGhGb3JTZXNzaW9uVG9rZW4iLCJQYXJzZVNlcnZlclJFU1RDb250cm9sbGVyIiwiYXBwbGljYXRpb25JZCIsInJvdXRlciIsImhhbmRsZVJlcXVlc3QiLCJtZXRob2QiLCJwYXRoIiwiZGF0YSIsImFyZ3MiLCJhcmd1bWVudHMiLCJnZXQiLCJzZXJ2ZXJVUkwiLCJwYXJzZSIsImluZGV4T2YiLCJzbGljZSIsImxlbmd0aCIsInByb21pc2VzIiwicmVxdWVzdHMiLCJtYXAiLCJyZXF1ZXN0IiwiYm9keSIsInJlc3BvbnNlIiwic3VjY2VzcyIsImVycm9yIiwiY29kZSIsIm1lc3NhZ2UiLCJhbGwiLCJxdWVyeSIsInJlamVjdCIsImF1dGgiLCJpbmZvIiwidHJ5Um91dGVSZXF1ZXN0Iiwic3RhdHVzIiwiZXJyIiwiRXJyb3IiLCJJTlZBTElEX0pTT04iLCJhcHBseSIsImFqYXgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsTUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFDQSxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxRQUFELENBQXBCOztBQUNBLE1BQU1FLGNBQWMsR0FBR0YsT0FBTyxDQUFDLCtCQUFELENBQTlCOztBQUNBLE1BQU1HLEdBQUcsR0FBR0gsT0FBTyxDQUFDLEtBQUQsQ0FBbkI7O0FBQ0EsTUFBTUksS0FBSyxHQUFHSixPQUFPLENBQUMsWUFBRCxDQUFyQjs7QUFFQSxTQUFT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UEUsRUFRSFksR0FBRyxJQUFJO0FBQ0wsY0FDRUEsR0FBRyxZQUFZN0MsS0FBSyxDQUFDOEMsS0FBckIsSUFDQUQsR0FBRyxDQUFDVCxJQUFKLElBQVlwQyxLQUFLLENBQUM4QyxLQUFOLENBQVlDLFlBRHhCLElBRUFGLEdBQUcsQ0FBQ1IsT0FBSixJQUFnQixnQkFBZXBCLE1BQU8sSUFBR0MsSUFBSyxFQUhoRCxFQUlFO0FBQ0FwQixZQUFBQSxjQUFjLENBQUNpQyxPQUFmLENBQXVCaUIsS0FBdkIsQ0FBNkIsSUFBN0IsRUFBbUM1QixJQUFuQyxFQUF5Q1QsSUFBekMsQ0FBOENOLE9BQTlDLEVBQXVEbUMsTUFBdkQ7QUFDRCxXQU5ELE1BTU87QUFDTEEsWUFBQUEsTUFBTSxDQUFDSyxHQUFELENBQU47QUFDRDtBQUNGLFNBbEJFLENBQVA7QUFvQkQsT0EvQkQsRUErQkdMLE1BL0JIO0FBZ0NELEtBakNNLENBQVA7QUFrQ0Q7O0FBRUQsU0FBTztBQUNMVCxJQUFBQSxPQUFPLEVBQUVmLGFBREo7QUFFTGlDLElBQUFBLElBQUksRUFBRW5ELGNBQWMsQ0FBQ21EO0FBRmhCLEdBQVA7QUFJRDs7ZUFFY3BDLHlCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQ29uZmlnID0gcmVxdWlyZSgnLi9Db25maWcnKTtcbmNvbnN0IEF1dGggPSByZXF1aXJlKCcuL0F1dGgnKTtcbmNvbnN0IFJFU1RDb250cm9sbGVyID0gcmVxdWlyZSgncGFyc2UvbGliL25vZGUvUkVTVENvbnRyb2xsZXInKTtcbmNvbnN0IFVSTCA9IHJlcXVpcmUoJ3VybCcpO1xuY29uc3QgUGFyc2UgPSByZXF1aXJlKCdwYXJzZS9ub2RlJyk7XG5cbmZ1bmN0aW9uIGdldFNlc3Npb25Ub2tlbihvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLnNlc3Npb25Ub2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG9wdGlvbnMuc2Vzc2lvblRva2VuKTtcbiAgfVxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xufVxuXG5mdW5jdGlvbiBnZXRBdXRoKG9wdGlvbnMgPSB7fSwgY29uZmlnKSB7XG4gIGNvbnN0IGluc3RhbGxhdGlvbklkID0gb3B0aW9ucy5pbnN0YWxsYXRpb25JZCB8fCAnY2xvdWQnO1xuICBpZiAob3B0aW9ucy51c2VNYXN0ZXJLZXkpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgbmV3IEF1dGguQXV0aCh7IGNvbmZpZywgaXNNYXN0ZXI6IHRydWUsIGluc3RhbGxhdGlvbklkIH0pXG4gICAgKTtcbiAgfVxuICByZXR1cm4gZ2V0U2Vzc2lvblRva2VuKG9wdGlvbnMpLnRoZW4oc2Vzc2lvblRva2VuID0+IHtcbiAgICBpZiAoc2Vzc2lvblRva2VuKSB7XG4gICAgICBvcHRpb25zLnNlc3Npb25Ub2tlbiA9IHNlc3Npb25Ub2tlbjtcbiAgICAgIHJldHVybiBBdXRoLmdldEF1dGhGb3JTZXNzaW9uVG9rZW4oe1xuICAgICAgICBjb25maWcsXG4gICAgICAgIHNlc3Npb25Ub2tlbjogc2Vzc2lvblRva2VuLFxuICAgICAgICBpbnN0YWxsYXRpb25JZCxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBBdXRoLkF1dGgoeyBjb25maWcsIGluc3RhbGxhdGlvbklkIH0pKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBQYXJzZVNlcnZlclJFU1RDb250cm9sbGVyKGFwcGxpY2F0aW9uSWQsIHJvdXRlcikge1xuICBmdW5jdGlvbiBoYW5kbGVSZXF1ZXN0KG1ldGhvZCwgcGF0aCwgZGF0YSA9IHt9LCBvcHRpb25zID0ge30pIHtcbiAgICAvLyBTdG9yZSB0aGUgYXJndW1lbnRzLCBmb3IgbGF0ZXIgdXNlIGlmIGludGVybmFsIGZhaWxzXG4gICAgY29uc3QgYXJncyA9IGFyZ3VtZW50cztcblxuICAgIGNvbnN0IGNvbmZpZyA9IENvbmZpZy5nZXQoYXBwbGljYXRpb25JZCk7XG4gICAgY29uc3Qgc2VydmVyVVJMID0gVVJMLnBhcnNlKGNvbmZpZy5zZXJ2ZXJVUkwpO1xuICAgIGlmIChwYXRoLmluZGV4T2Yoc2VydmVyVVJMLnBhdGgpID09PSAwKSB7XG4gICAgICBwYXRoID0gcGF0aC5zbGljZShzZXJ2ZXJVUkwucGF0aC5sZW5ndGgsIHBhdGgubGVuZ3RoKTtcbiAgICB9XG5cbiAgICBpZiAocGF0aFswXSAhPT0gJy8nKSB7XG4gICAgICBwYXRoID0gJy8nICsgcGF0aDtcbiAgICB9XG5cbiAgICBpZiAocGF0aCA9PT0gJy9iYXRjaCcpIHtcbiAgICAgIGNvbnN0IHByb21pc2VzID0gZGF0YS5yZXF1ZXN0cy5tYXAocmVxdWVzdCA9PiB7XG4gICAgICAgIHJldHVybiBoYW5kbGVSZXF1ZXN0KFxuICAgICAgICAgIHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgIHJlcXVlc3QucGF0aCxcbiAgICAgICAgICByZXF1ZXN0LmJvZHksXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICApLnRoZW4oXG4gICAgICAgICAgcmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IHN1Y2Nlc3M6IHJlc3BvbnNlIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgICAgIGVycm9yOiB7IGNvZGU6IGVycm9yLmNvZGUsIGVycm9yOiBlcnJvci5tZXNzYWdlIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgfVxuXG4gICAgbGV0IHF1ZXJ5O1xuICAgIGlmIChtZXRob2QgPT09ICdHRVQnKSB7XG4gICAgICBxdWVyeSA9IGRhdGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGdldEF1dGgob3B0aW9ucywgY29uZmlnKS50aGVuKGF1dGggPT4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAgICAgIGJvZHk6IGRhdGEsXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGF1dGgsXG4gICAgICAgICAgaW5mbzoge1xuICAgICAgICAgICAgYXBwbGljYXRpb25JZDogYXBwbGljYXRpb25JZCxcbiAgICAgICAgICAgIHNlc3Npb25Ub2tlbjogb3B0aW9ucy5zZXNzaW9uVG9rZW4sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBxdWVyeSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJvdXRlci50cnlSb3V0ZVJlcXVlc3QobWV0aG9kLCBwYXRoLCByZXF1ZXN0KTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50aGVuKFxuICAgICAgICAgICAgcmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlLnJlc3BvbnNlLCByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnIgPT4ge1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgZXJyIGluc3RhbmNlb2YgUGFyc2UuRXJyb3IgJiZcbiAgICAgICAgICAgICAgICBlcnIuY29kZSA9PSBQYXJzZS5FcnJvci5JTlZBTElEX0pTT04gJiZcbiAgICAgICAgICAgICAgICBlcnIubWVzc2FnZSA9PSBgY2Fubm90IHJvdXRlICR7bWV0aG9kfSAke3BhdGh9YFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBSRVNUQ29udHJvbGxlci5yZXF1ZXN0LmFwcGx5KG51bGwsIGFyZ3MpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICB9LCByZWplY3QpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZXF1ZXN0OiBoYW5kbGVSZXF1ZXN0LFxuICAgIGFqYXg6IFJFU1RDb250cm9sbGVyLmFqYXgsXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBhcnNlU2VydmVyUkVTVENvbnRyb2xsZXI7XG5leHBvcnQgeyBQYXJzZVNlcnZlclJFU1RDb250cm9sbGVyIH07XG4iXX0=