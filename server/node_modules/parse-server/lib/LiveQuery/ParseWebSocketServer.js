"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParseWebSocket = exports.ParseWebSocketServer = void 0;

var _logger = _interopRequireDefault(require("../logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const typeMap = new Map([['disconnect', 'close']]);

const getWS = function () {
  try {
    return require('uws');
  } catch (e) {
    return require('ws');
  }
};

class ParseWebSocketServer {
  constructor(server, onConnect, websocketTimeout = 10 * 1000) {
    const WebSocketServer = getWS().Server;
    const wss = new WebSocketServer({
      server: server
    });
    wss.on('listening', () => {
      _logger.default.info('Parse LiveQuery Server starts running');
    });
    wss.on('connection', ws => {
      onConnect(new ParseWebSocket(ws)); // Send ping to client periodically

      const pingIntervalId = setInterval(() => {
        if (ws.readyState == ws.OPEN) {
          ws.ping();
        } else {
          clearInterval(pingIntervalId);
        }
      }, websocketTimeout);
    });
    this.server = wss;
  }

}

exports.ParseWebSocketServer = ParseWebSocketServer;

class ParseWebSocket {
  constructor(ws) {
    this.ws = ws;
  }

  on(type, callback) {
    const wsType = typeMap.has(type) ? typeMap.get(type) : type;
    this.ws.on(wsType, callback);
  }

  send(message) {
    this.ws.send(message);
  }

}

exports.ParseWebSocket = ParseWebSocket;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MaXZlUXVlcnkvUGFyc2VXZWJTb2NrZXRTZXJ2ZXIuanMiXSwibmFtZXMiOlsidHlwZU1hcCIsIk1hcCIsImdldFdTIiwicmVxdWlyZSIsImUiLCJQYXJzZVdlYlNvY2tldFNlcnZlciIsImNvbnN0cnVjdG9yIiwic2VydmVyIiwib25Db25uZWN0Iiwid2Vic29ja2V0VGltZW91dCIsIldlYlNvY2tldFNlcnZlciIsIlNlcnZlciIsIndzcyIsIm9uIiwibG9nZ2VyIiwiaW5mbyIsIndzIiwiUGFyc2VXZWJTb2NrZXQiLCJwaW5nSW50ZXJ2YWxJZCIsInNldEludGVydmFsIiwicmVhZHlTdGF0ZSIsIk9QRU4iLCJwaW5nIiwiY2xlYXJJbnRlcnZhbCIsInR5cGUiLCJjYWxsYmFjayIsIndzVHlwZSIsImhhcyIsImdldCIsInNlbmQiLCJtZXNzYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7QUFFQSxNQUFNQSxPQUFPLEdBQUcsSUFBSUMsR0FBSixDQUFRLENBQUMsQ0FBQyxZQUFELEVBQWUsT0FBZixDQUFELENBQVIsQ0FBaEI7O0FBQ0EsTUFBTUMsS0FBSyxHQUFHLFlBQVc7QUFDdkIsTUFBSTtBQUNGLFdBQU9DLE9BQU8sQ0FBQyxLQUFELENBQWQ7QUFDRCxHQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsV0FBT0QsT0FBTyxDQUFDLElBQUQsQ0FBZDtBQUNEO0FBQ0YsQ0FORDs7QUFRTyxNQUFNRSxvQkFBTixDQUEyQjtBQUdoQ0MsRUFBQUEsV0FBVyxDQUNUQyxNQURTLEVBRVRDLFNBRlMsRUFHVEMsZ0JBQXdCLEdBQUcsS0FBSyxJQUh2QixFQUlUO0FBQ0EsVUFBTUMsZUFBZSxHQUFHUixLQUFLLEdBQUdTLE1BQWhDO0FBQ0EsVUFBTUMsR0FBRyxHQUFHLElBQUlGLGVBQUosQ0FBb0I7QUFBRUgsTUFBQUEsTUFBTSxFQUFFQTtBQUFWLEtBQXBCLENBQVo7QUFDQUssSUFBQUEsR0FBRyxDQUFDQyxFQUFKLENBQU8sV0FBUCxFQUFvQixNQUFNO0FBQ3hCQyxzQkFBT0MsSUFBUCxDQUFZLHVDQUFaO0FBQ0QsS0FGRDtBQUdBSCxJQUFBQSxHQUFHLENBQUNDLEVBQUosQ0FBTyxZQUFQLEVBQXFCRyxFQUFFLElBQUk7QUFDekJSLE1BQUFBLFNBQVMsQ0FBQyxJQUFJUyxjQUFKLENBQW1CRCxFQUFuQixDQUFELENBQVQsQ0FEeUIsQ0FFekI7O0FBQ0EsWUFBTUUsY0FBYyxHQUFHQyxXQUFXLENBQUMsTUFBTTtBQUN2QyxZQUFJSCxFQUFFLENBQUNJLFVBQUgsSUFBaUJKLEVBQUUsQ0FBQ0ssSUFBeEIsRUFBOEI7QUFDNUJMLFVBQUFBLEVBQUUsQ0FBQ00sSUFBSDtBQUNELFNBRkQsTUFFTztBQUNMQyxVQUFBQSxhQUFhLENBQUNMLGNBQUQsQ0FBYjtBQUNEO0FBQ0YsT0FOaUMsRUFNL0JULGdCQU4rQixDQUFsQztBQU9ELEtBVkQ7QUFXQSxTQUFLRixNQUFMLEdBQWNLLEdBQWQ7QUFDRDs7QUF6QitCOzs7O0FBNEIzQixNQUFNSyxjQUFOLENBQXFCO0FBRzFCWCxFQUFBQSxXQUFXLENBQUNVLEVBQUQsRUFBVTtBQUNuQixTQUFLQSxFQUFMLEdBQVVBLEVBQVY7QUFDRDs7QUFFREgsRUFBQUEsRUFBRSxDQUFDVyxJQUFELEVBQWVDLFFBQWYsRUFBK0I7QUFDL0IsVUFBTUMsTUFBTSxHQUFHMUIsT0FBTyxDQUFDMkIsR0FBUixDQUFZSCxJQUFaLElBQW9CeEIsT0FBTyxDQUFDNEIsR0FBUixDQUFZSixJQUFaLENBQXBCLEdBQXdDQSxJQUF2RDtBQUNBLFNBQUtSLEVBQUwsQ0FBUUgsRUFBUixDQUFXYSxNQUFYLEVBQW1CRCxRQUFuQjtBQUNEOztBQUVESSxFQUFBQSxJQUFJLENBQUNDLE9BQUQsRUFBcUI7QUFDdkIsU0FBS2QsRUFBTCxDQUFRYSxJQUFSLENBQWFDLE9BQWI7QUFDRDs7QUFkeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5cbmNvbnN0IHR5cGVNYXAgPSBuZXcgTWFwKFtbJ2Rpc2Nvbm5lY3QnLCAnY2xvc2UnXV0pO1xuY29uc3QgZ2V0V1MgPSBmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcmVxdWlyZSgndXdzJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnd3MnKTtcbiAgfVxufTtcblxuZXhwb3J0IGNsYXNzIFBhcnNlV2ViU29ja2V0U2VydmVyIHtcbiAgc2VydmVyOiBPYmplY3Q7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgc2VydmVyOiBhbnksXG4gICAgb25Db25uZWN0OiBGdW5jdGlvbixcbiAgICB3ZWJzb2NrZXRUaW1lb3V0OiBudW1iZXIgPSAxMCAqIDEwMDBcbiAgKSB7XG4gICAgY29uc3QgV2ViU29ja2V0U2VydmVyID0gZ2V0V1MoKS5TZXJ2ZXI7XG4gICAgY29uc3Qgd3NzID0gbmV3IFdlYlNvY2tldFNlcnZlcih7IHNlcnZlcjogc2VydmVyIH0pO1xuICAgIHdzcy5vbignbGlzdGVuaW5nJywgKCkgPT4ge1xuICAgICAgbG9nZ2VyLmluZm8oJ1BhcnNlIExpdmVRdWVyeSBTZXJ2ZXIgc3RhcnRzIHJ1bm5pbmcnKTtcbiAgICB9KTtcbiAgICB3c3Mub24oJ2Nvbm5lY3Rpb24nLCB3cyA9PiB7XG4gICAgICBvbkNvbm5lY3QobmV3IFBhcnNlV2ViU29ja2V0KHdzKSk7XG4gICAgICAvLyBTZW5kIHBpbmcgdG8gY2xpZW50IHBlcmlvZGljYWxseVxuICAgICAgY29uc3QgcGluZ0ludGVydmFsSWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGlmICh3cy5yZWFkeVN0YXRlID09IHdzLk9QRU4pIHtcbiAgICAgICAgICB3cy5waW5nKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChwaW5nSW50ZXJ2YWxJZCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHdlYnNvY2tldFRpbWVvdXQpO1xuICAgIH0pO1xuICAgIHRoaXMuc2VydmVyID0gd3NzO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQYXJzZVdlYlNvY2tldCB7XG4gIHdzOiBhbnk7XG5cbiAgY29uc3RydWN0b3Iod3M6IGFueSkge1xuICAgIHRoaXMud3MgPSB3cztcbiAgfVxuXG4gIG9uKHR5cGU6IHN0cmluZywgY2FsbGJhY2spOiB2b2lkIHtcbiAgICBjb25zdCB3c1R5cGUgPSB0eXBlTWFwLmhhcyh0eXBlKSA/IHR5cGVNYXAuZ2V0KHR5cGUpIDogdHlwZTtcbiAgICB0aGlzLndzLm9uKHdzVHlwZSwgY2FsbGJhY2spO1xuICB9XG5cbiAgc2VuZChtZXNzYWdlOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLndzLnNlbmQobWVzc2FnZSk7XG4gIH1cbn1cbiJdfQ==