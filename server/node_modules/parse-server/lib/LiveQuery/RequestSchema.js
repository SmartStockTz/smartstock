"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const general = {
  title: 'General request schema',
  type: 'object',
  properties: {
    op: {
      type: 'string',
      enum: ['connect', 'subscribe', 'unsubscribe', 'update']
    }
  },
  required: ['op']
};
const connect = {
  title: 'Connect operation schema',
  type: 'object',
  properties: {
    op: 'connect',
    applicationId: {
      type: 'string'
    },
    javascriptKey: {
      type: 'string'
    },
    masterKey: {
      type: 'string'
    },
    clientKey: {
      type: 'string'
    },
    windowsKey: {
      type: 'string'
    },
    restAPIKey: {
      type: 'string'
    },
    sessionToken: {
      type: 'string'
    }
  },
  required: ['op', 'applicationId'],
  additionalProperties: false
};
const subscribe = {
  title: 'Subscribe operation schema',
  type: 'object',
  properties: {
    op: 'subscribe',
    requestId: {
      type: 'number'
    },
    query: {
      title: 'Query field schema',
      type: 'object',
      properties: {
        className: {
          type: 'string'
        },
        where: {
          type: 'object'
        },
        fields: {
          type: 'array',
          items: {
            type: 'string'
          },
          minItems: 1,
          uniqueItems: true
        }
      },
      required: ['where', 'className'],
      additionalProperties: false
    },
    sessionToken: {
      type: 'string'
    }
  },
  required: ['op', 'requestId', 'query'],
  additionalProperties: false
};
const update = {
  title: 'Update operation schema',
  type: 'object',
  properties: {
    op: 'update',
    requestId: {
      type: 'number'
    },
    query: {
      title: 'Query field schema',
      type: 'object',
      properties: {
        className: {
          type: 'string'
        },
        where: {
          type: 'object'
        },
        fields: {
          type: 'array',
          items: {
            type: 'string'
          },
          minItems: 1,
          uniqueItems: true
        }
      },
      required: ['where', 'className'],
      additionalProperties: false
    },
    sessionToken: {
      type: 'string'
    }
  },
  required: ['op', 'requestId', 'query'],
  additionalProperties: false
};
const unsubscribe = {
  title: 'Unsubscribe operation schema',
  type: 'object',
  properties: {
    op: 'unsubscribe',
    requestId: {
      type: 'number'
    }
  },
  required: ['op', 'requestId'],
  additionalProperties: false
};
const RequestSchema = {
  general: general,
  connect: connect,
  subscribe: subscribe,
  update: update,
  unsubscribe: unsubscribe
};
var _default = RequestSchema;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MaXZlUXVlcnkvUmVxdWVzdFNjaGVtYS5qcyJdLCJuYW1lcyI6WyJnZW5lcmFsIiwidGl0bGUiLCJ0eXBlIiwicHJvcGVydGllcyIsIm9wIiwiZW51bSIsInJlcXVpcmVkIiwiY29ubmVjdCIsImFwcGxpY2F0aW9uSWQiLCJqYXZhc2NyaXB0S2V5IiwibWFzdGVyS2V5IiwiY2xpZW50S2V5Iiwid2luZG93c0tleSIsInJlc3RBUElLZXkiLCJzZXNzaW9uVG9rZW4iLCJhZGRpdGlvbmFsUHJvcGVydGllcyIsInN1YnNjcmliZSIsInJlcXVlc3RJZCIsInF1ZXJ5IiwiY2xhc3NOYW1lIiwid2hlcmUiLCJmaWVsZHMiLCJpdGVtcyIsIm1pbkl0ZW1zIiwidW5pcXVlSXRlbXMiLCJ1cGRhdGUiLCJ1bnN1YnNjcmliZSIsIlJlcXVlc3RTY2hlbWEiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE1BQU1BLE9BQU8sR0FBRztBQUNkQyxFQUFBQSxLQUFLLEVBQUUsd0JBRE87QUFFZEMsRUFBQUEsSUFBSSxFQUFFLFFBRlE7QUFHZEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1ZDLElBQUFBLEVBQUUsRUFBRTtBQUNGRixNQUFBQSxJQUFJLEVBQUUsUUFESjtBQUVGRyxNQUFBQSxJQUFJLEVBQUUsQ0FBQyxTQUFELEVBQVksV0FBWixFQUF5QixhQUF6QixFQUF3QyxRQUF4QztBQUZKO0FBRE0sR0FIRTtBQVNkQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQyxJQUFEO0FBVEksQ0FBaEI7QUFZQSxNQUFNQyxPQUFPLEdBQUc7QUFDZE4sRUFBQUEsS0FBSyxFQUFFLDBCQURPO0FBRWRDLEVBQUFBLElBQUksRUFBRSxRQUZRO0FBR2RDLEVBQUFBLFVBQVUsRUFBRTtBQUNWQyxJQUFBQSxFQUFFLEVBQUUsU0FETTtBQUVWSSxJQUFBQSxhQUFhLEVBQUU7QUFDYk4sTUFBQUEsSUFBSSxFQUFFO0FBRE8sS0FGTDtBQUtWTyxJQUFBQSxhQUFhLEVBQUU7QUFDYlAsTUFBQUEs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LEVBQVUsV0FBVixDQW5CTDtBQW9CTFMsTUFBQUEsb0JBQW9CLEVBQUU7QUFwQmpCLEtBTEc7QUEyQlZELElBQUFBLFlBQVksRUFBRTtBQUNaWixNQUFBQSxJQUFJLEVBQUU7QUFETTtBQTNCSixHQUhDO0FBa0NiSSxFQUFBQSxRQUFRLEVBQUUsQ0FBQyxJQUFELEVBQU8sV0FBUCxFQUFvQixPQUFwQixDQWxDRztBQW1DYlMsRUFBQUEsb0JBQW9CLEVBQUU7QUFuQ1QsQ0FBZjtBQXNDQSxNQUFNVyxXQUFXLEdBQUc7QUFDbEJ6QixFQUFBQSxLQUFLLEVBQUUsOEJBRFc7QUFFbEJDLEVBQUFBLElBQUksRUFBRSxRQUZZO0FBR2xCQyxFQUFBQSxVQUFVLEVBQUU7QUFDVkMsSUFBQUEsRUFBRSxFQUFFLGFBRE07QUFFVmEsSUFBQUEsU0FBUyxFQUFFO0FBQ1RmLE1BQUFBLElBQUksRUFBRTtBQURHO0FBRkQsR0FITTtBQVNsQkksRUFBQUEsUUFBUSxFQUFFLENBQUMsSUFBRCxFQUFPLFdBQVAsQ0FUUTtBQVVsQlMsRUFBQUEsb0JBQW9CLEVBQUU7QUFWSixDQUFwQjtBQWFBLE1BQU1ZLGFBQWEsR0FBRztBQUNwQjNCLEVBQUFBLE9BQU8sRUFBRUEsT0FEVztBQUVwQk8sRUFBQUEsT0FBTyxFQUFFQSxPQUZXO0FBR3BCUyxFQUFBQSxTQUFTLEVBQUVBLFNBSFM7QUFJcEJTLEVBQUFBLE1BQU0sRUFBRUEsTUFKWTtBQUtwQkMsRUFBQUEsV0FBVyxFQUFFQTtBQUxPLENBQXRCO2VBUWVDLGEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBnZW5lcmFsID0ge1xuICB0aXRsZTogJ0dlbmVyYWwgcmVxdWVzdCBzY2hlbWEnLFxuICB0eXBlOiAnb2JqZWN0JyxcbiAgcHJvcGVydGllczoge1xuICAgIG9wOiB7XG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIGVudW06IFsnY29ubmVjdCcsICdzdWJzY3JpYmUnLCAndW5zdWJzY3JpYmUnLCAndXBkYXRlJ10sXG4gICAgfSxcbiAgfSxcbiAgcmVxdWlyZWQ6IFsnb3AnXSxcbn07XG5cbmNvbnN0IGNvbm5lY3QgPSB7XG4gIHRpdGxlOiAnQ29ubmVjdCBvcGVyYXRpb24gc2NoZW1hJyxcbiAgdHlwZTogJ29iamVjdCcsXG4gIHByb3BlcnRpZXM6IHtcbiAgICBvcDogJ2Nvbm5lY3QnLFxuICAgIGFwcGxpY2F0aW9uSWQ6IHtcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIH0sXG4gICAgamF2YXNjcmlwdEtleToge1xuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgfSxcbiAgICBtYXN0ZXJLZXk6IHtcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIH0sXG4gICAgY2xpZW50S2V5OiB7XG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICB9LFxuICAgIHdpbmRvd3NLZXk6IHtcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIH0sXG4gICAgcmVzdEFQSUtleToge1xuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgfSxcbiAgICBzZXNzaW9uVG9rZW46IHtcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIH0sXG4gIH0sXG4gIHJlcXVpcmVkOiBbJ29wJywgJ2FwcGxpY2F0aW9uSWQnXSxcbiAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlLFxufTtcblxuY29uc3Qgc3Vic2NyaWJlID0ge1xuICB0aXRsZTogJ1N1YnNjcmliZSBvcGVyYXRpb24gc2NoZW1hJyxcbiAgdHlwZTogJ29iamVjdCcsXG4gIHByb3BlcnRpZXM6IHtcbiAgICBvcDogJ3N1YnNjcmliZScsXG4gICAgcmVxdWVzdElkOiB7XG4gICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICB9LFxuICAgIHF1ZXJ5OiB7XG4gICAgICB0aXRsZTogJ1F1ZXJ5IGZpZWxkIHNjaGVtYScsXG4gICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgY2xhc3NOYW1lOiB7XG4gICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIH0sXG4gICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgIH0sXG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIHR5cGU6ICdhcnJheScsXG4gICAgICAgICAgaXRlbXM6IHtcbiAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgbWluSXRlbXM6IDEsXG4gICAgICAgICAgdW5pcXVlSXRlbXM6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgcmVxdWlyZWQ6IFsnd2hlcmUnLCAnY2xhc3NOYW1lJ10sXG4gICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UsXG4gICAgfSxcbiAgICBzZXNzaW9uVG9rZW46IHtcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIH0sXG4gIH0sXG4gIHJlcXVpcmVkOiBbJ29wJywgJ3JlcXVlc3RJZCcsICdxdWVyeSddLFxuICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UsXG59O1xuXG5jb25zdCB1cGRhdGUgPSB7XG4gIHRpdGxlOiAnVXBkYXRlIG9wZXJhdGlvbiBzY2hlbWEnLFxuICB0eXBlOiAnb2JqZWN0JyxcbiAgcHJvcGVydGllczoge1xuICAgIG9wOiAndXBkYXRlJyxcbiAgICByZXF1ZXN0SWQ6IHtcbiAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgIH0sXG4gICAgcXVlcnk6IHtcbiAgICAgIHRpdGxlOiAnUXVlcnkgZmllbGQgc2NoZW1hJyxcbiAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBjbGFzc05hbWU6IHtcbiAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgfSxcbiAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgfSxcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgICBpdGVtczoge1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBtaW5JdGVtczogMSxcbiAgICAgICAgICB1bmlxdWVJdGVtczogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICByZXF1aXJlZDogWyd3aGVyZScsICdjbGFzc05hbWUnXSxcbiAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZSxcbiAgICB9LFxuICAgIHNlc3Npb25Ub2tlbjoge1xuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgfSxcbiAgfSxcbiAgcmVxdWlyZWQ6IFsnb3AnLCAncmVxdWVzdElkJywgJ3F1ZXJ5J10sXG4gIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZSxcbn07XG5cbmNvbnN0IHVuc3Vic2NyaWJlID0ge1xuICB0aXRsZTogJ1Vuc3Vic2NyaWJlIG9wZXJhdGlvbiBzY2hlbWEnLFxuICB0eXBlOiAnb2JqZWN0JyxcbiAgcHJvcGVydGllczoge1xuICAgIG9wOiAndW5zdWJzY3JpYmUnLFxuICAgIHJlcXVlc3RJZDoge1xuICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgfSxcbiAgfSxcbiAgcmVxdWlyZWQ6IFsnb3AnLCAncmVxdWVzdElkJ10sXG4gIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZSxcbn07XG5cbmNvbnN0IFJlcXVlc3RTY2hlbWEgPSB7XG4gIGdlbmVyYWw6IGdlbmVyYWwsXG4gIGNvbm5lY3Q6IGNvbm5lY3QsXG4gIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICB1cGRhdGU6IHVwZGF0ZSxcbiAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVxdWVzdFNjaGVtYTtcbiJdfQ==