{
  "version": 3,
  "file": "ngforage.umd.min.js",
  "sources": [
    "ng://ngforage/node_modules/tslib/tslib.es6.js",
    "ng://ngforage/out/NgForage/imports/localforage.ts",
    "ng://ngforage/out/NgForage/imports/serializer.ts",
    "ng://ngforage/out/NgForage/session-storage/_getKeyPrefix.ts",
    "ng://ngforage/out/NgForage/session-storage/_isSessionStorageUsable.ts",
    "ng://ngforage/out/NgForage/session-storage/checkIfSessionStorageThrows.ts",
    "ng://ngforage/out/NgForage/session-storage/executeCallback.ts",
    "ng://ngforage/out/NgForage/session-storage/normalizeKey.ts",
    "ng://ngforage/out/NgForage/session-storage/index.ts",
    "ng://ngforage/out/NgForage/session-storage/_initStorage.ts",
    "ng://ngforage/out/NgForage/session-storage/clear.ts",
    "ng://ngforage/out/NgForage/session-storage/dropInstance.ts",
    "ng://ngforage/out/NgForage/session-storage/getCallback.ts",
    "ng://ngforage/out/NgForage/session-storage/getItem.ts",
    "ng://ngforage/out/NgForage/session-storage/iterate.ts",
    "ng://ngforage/out/NgForage/session-storage/key.ts",
    "ng://ngforage/out/NgForage/session-storage/keys.ts",
    "ng://ngforage/out/NgForage/session-storage/length.ts",
    "ng://ngforage/out/NgForage/session-storage/removeItem.ts",
    "ng://ngforage/out/NgForage/session-storage/setItem.ts",
    "ng://ngforage/out/NgForage/DEFAULT_CONFIG.token.ts",
    "ng://ngforage/out/NgForage/NgForage.module.ts",
    "ng://ngforage/out/NgForage/config/NgForageConfig.service.ts",
    "ng://ngforage/out/NgForage/instance-factory/InstanceFactory.service.ts",
    "ng://ngforage/out/NgForage/config/BaseConfigurableImpl.service.ts",
    "ng://ngforage/out/NgForage/main/NgForage.service.ts",
    "ng://ngforage/out/NgForage/cache/CachedItemImpl.ts",
    "ng://ngforage/out/NgForage/cache/NgForageCache.service.ts",
    "ng://ngforage/out/NgForage/dedicated/NgForageCacheDedicated.ts",
    "ng://ngforage/out/NgForage/dedicated/NgForageDedicated.ts",
    "ng://ngforage/out/NgForage/dedicated/DedicatedInstanceFactory.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "import 'localforage';\n\n/** @internal */\nconst lf: any = require('localforage');\n\n/** @internal */\nexport const localForage: LocalForage = 'defineDriver' in lf ? lf : lf.default;\n",
    "/** @internal */\nconst serializer$: any = require('localforage/src/utils/serializer');\n\n/** @internal */\nexport const serializer: any = serializer$.default || serializer$;\n",
    "/** @internal */\nexport function _getKeyPrefix(options: LocalForageOptions, defaultConfig: LocalForageOptions): string {\n  let keyPrefix = `${options.name}/`;\n\n  if (options.storeName !== defaultConfig.storeName) {\n    keyPrefix += `${options.storeName}/`;\n  }\n\n  return keyPrefix;\n}\n",
    "import {checkIfSessionStorageThrows} from './checkIfSessionStorageThrows';\n\n/** @internal */\nexport function _isSessionStorageUsable() {\n    return typeof sessionStorage !== 'undefined' && (!checkIfSessionStorageThrows() || sessionStorage.length > 0);\n}\n",
    "/**\n * Check if sessionStorage throws when saving an item\n * @internal\n */\nexport function checkIfSessionStorageThrows(): boolean {\n  const testKey = '_localforage_support_test';\n\n  try {\n    sessionStorage.setItem(testKey, '1');\n    sessionStorage.removeItem(testKey);\n\n    return false;\n  } catch (e) {\n    return true;\n  }\n}\n",
    "/** @internal */\nexport function executeCallback(promise: Promise<any>, callback?: any): void {\n  if (callback) {\n    promise.then(\n      (result: any) => {\n        callback(null, result);\n      },\n      (error: any) => {\n        callback(error);\n      }\n    );\n  }\n}\n",
    "/** @internal */\nexport function normalizeKey(key: any): string {\n  // Cast the key to a string, as that's all we can set as a key.\n  if (typeof key !== 'string') {\n    console.warn(`${key} used as a key, but it is not a string.`);\n    key = String(key);\n  }\n\n  return key;\n}\n",
    "import {localForage as lf} from '../imports/localforage';\nimport {_initStorage} from './_initStorage';\nimport {_isSessionStorageUsable} from './_isSessionStorageUsable';\nimport {clear} from './clear';\nimport {dropInstance} from './dropInstance';\nimport {getItem} from './getItem';\nimport {iterate} from './iterate';\nimport {key} from './key';\nimport {keys} from './keys';\nimport {length} from './length';\nimport {removeItem} from './removeItem';\nimport {setItem} from './setItem';\n\n/** @internal */\nexport const _driver = 'ngforage_sessionStorage';\n\n/** @internal */\nconst sessionStorageWrapper: LocalForageDriver = {\n  _driver,\n  _initStorage,\n  _support: _isSessionStorageUsable(),\n  clear,\n  dropInstance,\n  getItem,\n  iterate,\n  key,\n  keys,\n  length,\n  removeItem,\n  setItem\n};\n\n//tslint:disable-next-line:no-unbound-method\nlf.defineDriver(sessionStorageWrapper).catch(console.error);\n",
    "import {serializer} from '../imports/serializer';\nimport {_getKeyPrefix} from './_getKeyPrefix';\nimport {_isSessionStorageUsable} from './_isSessionStorageUsable';\n\n/** @internal */\nexport function _initStorage(this: any, options: LocalForageOptions) {\n  const dbInfo: any = {};\n\n  if (options) {\n    for (let i in options) { //tslint:disable-line:forin\n      dbInfo[i] = options[i];\n    }\n  }\n\n  dbInfo.keyPrefix = _getKeyPrefix(options, this._defaultConfig);\n\n  if (!_isSessionStorageUsable()) {\n    return Promise.reject(new Error('Local storage unusable'));\n  }\n\n  this._dbInfo = dbInfo;\n  dbInfo.serializer = serializer;\n\n  return Promise.resolve();\n}\n",
    "import {executeCallback} from './executeCallback';\n\n/** @internal */\nexport function clear(this: any, callback?: any) {\n  const promise = this.ready().then(() => {\n    const keyPrefix = this._dbInfo.keyPrefix;\n\n    for (let i = sessionStorage.length - 1; i >= 0; i--) {\n      let key$ = sessionStorage.key(i);\n\n      if (key$ !== null && key$.indexOf(keyPrefix) === 0) {\n        sessionStorage.removeItem(key$);\n      }\n    }\n  });\n\n  executeCallback(promise, callback);\n\n  return promise;\n}\n",
    "import {_getKeyPrefix} from './_getKeyPrefix';\nimport {executeCallback} from './executeCallback';\nimport {getCallback} from './getCallback';\n\n/** @internal */\nexport function dropInstance(this: any, options: any, callback?: any) {\n  callback = getCallback.apply(this, arguments);\n\n  options = (typeof options !== 'function' && options) || {};\n  if (!options.name) {\n    const currentConfig = this.config();\n    options.name = options.name || currentConfig.name;\n    options.storeName = options.storeName || currentConfig.storeName;\n  }\n\n  let promise: Promise<void>;\n  if (!options.name) {\n    promise = Promise.reject('Invalid arguments');\n  } else {\n    promise = new Promise<string>(resolve => {\n      if (!options.storeName) {\n        resolve(`${options.name}/`);\n      } else {\n        resolve(_getKeyPrefix(options, this._defaultConfig));\n      }\n    })\n      .then((keyPrefix: any) => {\n        for (let i = sessionStorage.length - 1; i >= 0; i--) {\n          const key$ = sessionStorage.key(i);\n\n          if (key$ !== null && key$.indexOf(keyPrefix) === 0) {\n            sessionStorage.removeItem(key$);\n          }\n        }\n      });\n  }\n\n  executeCallback(promise, callback);\n\n  return promise;\n}\n",
    "/** @internal */\nexport function getCallback(): any {\n  if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\n    return arguments[arguments.length - 1];\n  }\n}\n",
    "import {executeCallback} from './executeCallback';\nimport {normalizeKey} from './normalizeKey';\n\n/** @internal */\nexport function getItem(this: any, key$: string, callback?: any) {\n  key$ = normalizeKey(key$);\n\n  const promise = this.ready().then(() => {\n    let result = sessionStorage.getItem(`${this._dbInfo.keyPrefix}${key$}`);\n\n    // If a result was found, parse it from the serialized\n    // string into a JS object. If result isn't truthy, the key\n    // is likely undefined and we'll pass it straight to the\n    // callback.\n    if (result) {\n      result = this._dbInfo.serializer.deserialize(result);\n    }\n\n    return result;\n  });\n\n  executeCallback(promise, callback);\n\n  return promise;\n}\n",
    "import {executeCallback} from './executeCallback';\n\n/** @internal */\nexport function iterate(this: any, iterator: any, callback?: any) {\n  const promise = this.ready().then(() => {\n    const keyPrefix = this._dbInfo.keyPrefix;\n    const keyPrefixLength = keyPrefix.length;\n    const length$ = sessionStorage.length;\n\n    // We use a dedicated iterator instead of the `i` variable below\n    // so other keys we fetch in sessionStorage aren't counted in\n    // the `iterationNumber` argument passed to the `iterate()`\n    // callback.\n    //\n    // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n    let iterationNumber = 1;\n\n    for (let i = 0; i < length$; i++) {\n      const key$ = sessionStorage.key(i);\n      if (key$ === null || key$.indexOf(keyPrefix) !== 0) {\n        continue;\n      }\n      let value = sessionStorage.getItem(key$);\n\n      // If a result was found, parse it from the serialized\n      // string into a JS object. If result isn't truthy, the\n      // key is likely undefined and we'll pass it straight\n      // to the iterator.\n      if (value) {\n        value = this._dbInfo.serializer.deserialize(value);\n      }\n\n      value = iterator(\n        value,\n        key$.substring(keyPrefixLength),\n        iterationNumber++\n      );\n\n      if (value !== void 0) {\n        return value;\n      }\n    }\n  });\n\n  executeCallback(promise, callback);\n\n  return promise;\n}\n",
    "import {executeCallback} from './executeCallback';\n\n/** @internal */\nexport function key(this: any, n: number, callback?: any) {\n  const promise = this.ready().then(() => {\n    let result: any;\n    try {\n      result = sessionStorage.key(n);\n    } catch (error) {\n      result = null;\n    }\n\n    // Remove the prefix from the key, if a key is found.\n    if (result) {\n      result = result.substring(this._dbInfo.keyPrefix.length);\n    }\n\n    return result;\n  });\n\n  executeCallback(promise, callback);\n\n  return promise;\n}\n",
    "import {executeCallback} from './executeCallback';\n\n/** @internal */\nexport function keys(this: any, callback?: any) {\n  const promise = this.ready().then(() => {\n    const length$ = sessionStorage.length;\n    const keys$: any[] = [];\n\n    for (let i = 0; i < length$; i++) {\n      const itemKey = sessionStorage.key(i);\n      if (itemKey !== null && itemKey.indexOf(this._dbInfo.keyPrefix) === 0) {\n        keys$.push(itemKey.substring(this._dbInfo.keyPrefix.length));\n      }\n    }\n\n    return keys$;\n  });\n\n  executeCallback(promise, callback);\n\n  return promise;\n}\n",
    "import {executeCallback} from './executeCallback';\n\n/** @internal */\nexport function length(this: any, callback?: any) {\n  const promise = this.keys().then((keys$: any[]) => keys$.length);\n\n  executeCallback(promise, callback);\n\n  return promise;\n}\n",
    "import {executeCallback} from './executeCallback';\nimport {normalizeKey} from './normalizeKey';\n\n/** @internal */\nexport function removeItem(this: any, key$: string, callback?: any) {\n  key$ = normalizeKey(key$);\n\n  const promise = this.ready().then(() => {\n    sessionStorage.removeItem(`${this._dbInfo.keyPrefix}${key$}`);\n  });\n\n  executeCallback(promise, callback);\n\n  return promise;\n}\n",
    "import {executeCallback} from './executeCallback';\nimport {normalizeKey} from './normalizeKey';\n\n/** @internal */\nexport function setItem(this: any, key$: string, value: any, callback?: any) {\n  key$ = normalizeKey(key$);\n\n  const promise = this.ready().then(() => {\n    // Convert undefined values to null.\n    // https://github.com/mozilla/localForage/pull/42\n    if (value === undefined) {\n      value = null;\n    }\n\n    // Save the original value to pass to the callback.\n    const originalValue = value;\n\n    return new Promise<any>((resolve, reject) => {\n      this._dbInfo.serializer.serialize(value, (value$: string, error: Error) => {\n        if (error) {\n          reject(error);\n        } else {\n          try {\n            sessionStorage.setItem(`${this._dbInfo.keyPrefix}${key$}`, value$);\n            resolve(originalValue);\n          } catch (e) {\n            // sessionStorage capacity exceeded.\n            if (\n              e.name === 'QuotaExceededError' ||\n              e.name === 'NS_ERROR_DOM_QUOTA_REACHED'\n            ) {\n              reject(e);\n            }\n            reject(e);\n          }\n        }\n      });\n    });\n  });\n\n  executeCallback(promise, callback);\n\n  return promise;\n}\n",
    "/** @internal */\nimport {InjectionToken} from '@angular/core';\nimport {NgForageOptions} from './config/NgForageOptions';\n\nexport const DEFAULT_CONFIG = new InjectionToken<NgForageOptions>('Default NgForage config');\n",
    "import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {NgForageOptions} from './config/NgForageOptions';\nimport {DEFAULT_CONFIG} from './DEFAULT_CONFIG.token';\n\n/**\n * NgForage core module\n */\n@NgModule({})\nexport class NgForageModule {\n\n  // istanbul ignore next\n  public static forRoot(config: Partial<NgForageOptions> = {}): ModuleWithProviders {\n    return {\n      ngModule: NgForageModule,\n      providers: [\n        {\n          provide: DEFAULT_CONFIG,\n          useValue: Object.assign({}, config)\n        }\n      ]\n    };\n  }\n}\n",
    "import {Inject, Injectable, Optional} from '@angular/core';\nimport 'localforage';\nimport {DEFAULT_CONFIG} from '../DEFAULT_CONFIG.token';\nimport {localForage as lf} from '../imports/localforage';\nimport {_driver} from '../session-storage';\nimport {BaseConfigurable} from './BaseConfigurable';\nimport {CacheConfigurable} from './CacheConfigurable';\nimport {NgForageOptions} from './NgForageOptions';\n\nconst $defaultConfig = Symbol('Default Config');\n\n/**\n * Global/default configuration\n */\n@Injectable({providedIn: 'root'})\nexport class NgForageConfig implements BaseConfigurable, CacheConfigurable {\n\n  /** The IndexedDB driver */\n  public static readonly DRIVER_INDEXEDDB: string = lf.INDEXEDDB;\n  /** The localStorage driver */\n  public static readonly DRIVER_LOCALSTORAGE: string = lf.LOCALSTORAGE;\n  /** The sessionStorage driver */\n  public static readonly DRIVER_SESSIONSTORAGE: string = _driver;\n  /** The WebSQL driver */\n  public static readonly DRIVER_WEBSQL: string = lf.WEBSQL;\n\n  public constructor(@Optional() @Inject(DEFAULT_CONFIG) conf: NgForageOptions) {\n    this[$defaultConfig] = {\n      cacheTime: 300000,\n      description: '',\n      driver: [lf.INDEXEDDB, lf.WEBSQL, lf.LOCALSTORAGE],\n      name: 'ngForage',\n      size: 4980736,\n      storeName: 'ng_forage',\n      version: 1\n    };\n    if (conf) {\n      this.configure(conf);\n    }\n  }\n\n  /**\n   * Cache time in milliseconds\n   * @default 300000\n   */\n  public get cacheTime(): number {\n    return this[$defaultConfig].cacheTime;\n  }\n\n  public set cacheTime(t: number) {\n    this[$defaultConfig].cacheTime = t;\n  }\n\n  /**\n   * Get the compiled configuration\n   */\n  public get config(): NgForageOptions {\n    return {\n      cacheTime: this.cacheTime,\n      description: this.description,\n      driver: this.driver,\n      name: this.name,\n      size: this.size,\n      storeName: this.storeName,\n      version: this.version\n    };\n  }\n\n  /**\n   * A description of the database, essentially for developer usage.\n   * @default\n   */\n  public get description(): string {\n    return this[$defaultConfig].description;\n  }\n\n  public set description(v: string) {\n    this[$defaultConfig].description = v;\n  }\n\n  /**\n   * The preferred driver(s) to use.\n   * @see {@link NgForageConfig#DRIVER_INDEXEDDB}\n   * @see {@link NgForageConfig#DRIVER_WEBSQL}\n   * @see {@link NgForageConfig#DRIVER_LOCALSTORAGE}\n   * @see {@link NgForageConfig#DRIVER_SESSIONSTORAGE}\n   */\n  public get driver(): string | string[] {\n    if (typeof this[$defaultConfig].driver === 'string') {\n      return this[$defaultConfig].driver;\n    }\n\n    return this[$defaultConfig].driver.slice();\n  }\n\n  public set driver(v: string | string[]) {\n    this[$defaultConfig].driver = v;\n  }\n\n  /**\n   * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n   * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n   * @default ngForage\n   */\n  public get name(): string {\n    return this[$defaultConfig].name;\n  }\n\n  public set name(v: string) {\n    this[$defaultConfig].name = v;\n  }\n\n  /**\n   * The size of the database in bytes. Used only in WebSQL for now.\n   * @default 4980736\n   */\n  public get size(): number {\n    return this[$defaultConfig].size;\n  }\n\n  public set size(v: number) {\n    this[$defaultConfig].size = v;\n  }\n\n  /**\n   * The name of the datastore.\n   * In IndexedDB this is the dataStore,\n   * in WebSQL this is the name of the key/value table in the database.\n   * Must be alphanumeric, with underscores.\n   * Any non-alphanumeric characters will be converted to underscores.\n   * @default ng_forage\n   */\n  public get storeName(): string {\n    return this[$defaultConfig].storeName;\n  }\n\n  public set storeName(v: string) {\n    this[$defaultConfig].storeName = v;\n  }\n\n  /**\n   * The version of your database. May be used for upgrades in the future; currently unused.\n   * @default 1.0\n   */\n  public get version(): number {\n    return this[$defaultConfig].version;\n  }\n\n  public set version(v: number) {\n    this[$defaultConfig].version = v;\n  }\n\n  /**\n   * Bulk-set configuration options\n   * @param opts The configuration\n   */\n  public configure(opts: NgForageOptions): this {\n    opts = opts || {};\n\n    if ('driver' in opts && opts.driver.slice) {\n      opts.driver = opts.driver.slice();\n    }\n\n    Object.assign(this[$defaultConfig], opts);\n\n    return this;\n  }\n\n  /**\n   * Define a driver\n   *\n   * You’ll want to make sure you accept a callback argument and that you pass the same arguments to callbacks as the\n   * default drivers do. You’ll also want to resolve or reject promises.\n   * Check any of the {@link https://github.com/mozilla/localForage/tree/master/src/drivers default drivers}\n   * for an idea of how to implement your own, custom driver.\n   * @param spec Driver spec\n   */\n  public defineDriver(spec: LocalForageDriver): Promise<void> {\n    return lf.defineDriver(spec);\n  }\n\n  /** @internal */\n  public toJSON(): NgForageOptions {\n    return this.config;\n  }\n\n  public toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nObject.defineProperty(NgForageConfig.prototype, Symbol.toStringTag, {value: 'NgForageConfig'});\n",
    "import {Injectable} from '@angular/core';\nimport 'localforage';\nimport {NgForageConfig} from '../config/NgForageConfig.service';\nimport {NgForageOptions} from '../config/NgForageOptions';\nimport {localForage as lf} from '../imports/localforage';\n\n/** @internal */\ninterface InstanceMap {\n  [hash: string]: LocalForage;\n}\n\n/** @internal */\nconst stores: InstanceMap = {};\n\n/** @internal */\nfunction getDriverString(driver?: string | string[]) {\n  if (!driver) {\n    return '';\n  } else if (typeof driver === 'string') {\n    return driver;\n  } else {\n    return driver.slice().sort().join(',');\n  }\n}\n\n/** @internal */\nfunction getHash(cfg: NgForageOptions): string {\n  return [\n    getDriverString(cfg.driver),\n    cfg.name,\n    cfg.size,\n    cfg.storeName,\n    cfg.version,\n    cfg.description,\n    cfg.cacheTime\n  ].join('|');\n}\n\n/** @internal */\nconst conf$ = Symbol('Config');\n\n/**\n * Creates localForage instances\n */\n@Injectable({providedIn: 'root'})\nexport class InstanceFactory {\n\n  /** @internal */\n  public constructor(conf: NgForageConfig) {\n    this[conf$] = conf;\n  }\n\n  public getInstance(cfg: NgForageOptions): LocalForage {\n    cfg = Object.assign({}, this[conf$].config, cfg || {});\n    const hash = getHash(cfg);\n\n    if (!stores[hash]) {\n      stores[hash] = lf.createInstance(cfg);\n    }\n\n    return stores[hash];\n  }\n}\n\nObject.defineProperty(InstanceFactory.prototype, Symbol.toStringTag, {value: 'InstanceFactory'});\n",
    "import {Inject} from '@angular/core';\nimport 'localforage';\nimport {InstanceFactory} from '../instance-factory/InstanceFactory.service';\nimport {BaseConfigurable} from './BaseConfigurable';\nimport {NgForageConfig} from './NgForageConfig.service';\nimport {NgForageOptions} from './NgForageOptions';\n\n/** @internal */\nconst store$ = Symbol('Store');\n\n/**\n * Abstract service-level configuration layer for NgForage\n */\nexport abstract class BaseConfigurableImpl implements BaseConfigurable {\n\n  /** @internal */\n  protected readonly baseConfig: NgForageConfig;\n  /** @internal */\n  protected readonly config: NgForageOptions = {};\n  /** @internal */\n  protected readonly fact: InstanceFactory;\n  /** @internal */\n  protected storeNeedsRecalc = true;\n\n  /** @internal */\n  public constructor(@Inject(NgForageConfig) config: NgForageConfig,\n                     @Inject(InstanceFactory) instanceFactory: InstanceFactory) {\n    this.baseConfig = config;\n    this.fact = instanceFactory;\n  }\n\n  /**\n   * A description of the database, essentially for developer usage.\n   * @default \"\"\n   */\n  public get description(): string {\n    return 'description' in this.config ? this.config.description : this.baseConfig.description;\n  }\n\n  public set description(v: string) {\n    this.config.description = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The preferred driver(s) to use.\n   * @see {@link NgForageConfig#DRIVER_INDEXEDDB}\n   * @see {@link NgForageConfig#DRIVER_WEBSQL}\n   * @see {@link NgForageConfig#DRIVER_LOCALSTORAGE}\n   * @see {@link NgForageConfig#DRIVER_SESSIONSTORAGE}\n   * @default IndexedDB, WebSQL and localStorage\n   */\n  public get driver(): string | string[] {\n    return 'driver' in this.config ? this.config.driver : this.baseConfig.driver;\n  }\n\n  public set driver(v: string | string[]) {\n    this.config.driver = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n   * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n   * @default ngForage\n   */\n  public get name(): string {\n    return 'name' in this.config ? this.config.name : this.baseConfig.name;\n  }\n\n  public set name(v: string) {\n    this.config.name = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The size of the database in bytes. Used only in WebSQL for now.\n   * @default 4980736\n   */\n  public get size(): number {\n    return 'size' in this.config ? this.config.size : this.baseConfig.size;\n  }\n\n  public set size(v: number) {\n    this.config.size = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The name of the datastore.\n   * In IndexedDB this is the dataStore,\n   * in WebSQL this is the name of the key/value table in the database.\n   * Must be alphanumeric, with underscores.\n   * Any non-alphanumeric characters will be converted to underscores.\n   * @default ng_forage\n   */\n  public get storeName(): string {\n    return 'storeName' in this.config ? this.config.storeName : this.baseConfig.storeName;\n  }\n\n  public set storeName(v: string) {\n    this.config.storeName = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The version of your database. May be used for upgrades in the future; currently unused.\n   * @default 1.0\n   */\n  public get version(): number {\n    return 'version' in this.config ? this.config.version : this.baseConfig.version;\n  }\n\n  public set version(v: number) {\n    this.config.version = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /** @internal */\n  protected get finalConfig(): NgForageOptions {\n    return Object.assign(\n      {},\n      this.baseConfig.config,\n      this.config\n    );\n  }\n\n  /** @internal */\n  protected get store(): LocalForage {\n    if (this.storeNeedsRecalc || !this[store$]) {\n      this[store$] = this.fact.getInstance(this.finalConfig);\n      this.storeNeedsRecalc = false;\n    }\n\n    return this[store$];\n  }\n\n  /**\n   * Bulk-set configuration options\n   * @param opts The configuration\n   */\n  public configure(opts: NgForageOptions): this {\n    opts = opts || {};\n\n    if ('driver' in opts && opts.driver.slice) {\n      opts.driver = opts.driver.slice();\n    }\n\n    Object.assign(this.config, opts);\n    this.storeNeedsRecalc = true;\n\n    return this;\n  }\n\n  /** @internal */\n  public toJSON(): Partial<NgForageOptions> {\n    return {\n      description: this.description,\n      driver: this.driver,\n      name: this.name,\n      size: this.size,\n      storeName: this.storeName,\n      version: this.version\n    };\n  }\n\n  public toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nObject.defineProperty(BaseConfigurableImpl.prototype, Symbol.toStringTag, {value: 'BaseConfigurable'});\n",
    "import {Injectable} from '@angular/core';\nimport {BaseConfigurable} from '../config/BaseConfigurable';\nimport {BaseConfigurableImpl} from '../config/BaseConfigurableImpl.service';\nimport {NgForageOptions} from '../config/NgForageOptions';\n\n/**\n * Cache instance\n */\n@Injectable({providedIn: 'root'})\nexport class NgForage extends BaseConfigurableImpl implements BaseConfigurable {\n\n  /**\n   * Returns the name of the driver being used, or null if none can be used.\n   */\n  public get activeDriver(): string {\n    return this.store.driver();\n  }\n\n  /**\n   * Removes every key from the database, returning it to a blank slate.\n   *\n   * clear() will remove <b>every item in the offline store</b>. Use this method with caution.\n   */\n  public clear(): Promise<void> {\n    return this.store.clear();\n  }\n\n  /**\n   * Make a clone of the instance\n   * @param config Optional configuration\n   */\n  public clone(config?: NgForageOptions): NgForage {\n    const inst = new NgForage(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n\n  /**\n   * Gets an item from the storage library.\n   * If the key does not exist, getItem() will return null.\n   * @param key Data key\n   */\n  public getItem<T>(key: string): Promise<T> {\n    return this.store.getItem<T>(key);\n  }\n\n  /**\n   * Iterate over all value/key pairs in datastore.\n   * <i>iteratee</i> is called once for each pair, with the following arguments:\n   * <ol>\n   *   <li>Value</li>\n   *   <li>Key</li>\n   *   <li>iterationNumber - one-based number</li>\n   * </ol>\n   * iterate() supports early exit by returning non undefined value inside iteratorCallback callback.\n   * @param iteratee\n   */\n  public iterate<T, U>(iteratee: (value: T, key: string, iterationNumber: number) => U): Promise<U> {\n    return this.store.iterate(iteratee);\n  }\n\n  /**\n   * Get the name of a key based on its ID.\n   * @param index\n   */\n  public key(index: number): Promise<string> {\n    return this.store.key(index);\n  }\n\n  /**\n   * Get the list of all keys in the datastore.\n   */\n  public keys(): Promise<string[]> {\n    return this.store.keys();\n  }\n\n  /**\n   * Gets the number of keys in the offline store (i.e. its “length”).\n   */\n  public length(): Promise<number> {\n    return this.store.length();\n  }\n\n  /**\n   * Even though localForage queues up all of its data API method calls,\n   * ready() provides a way to determine whether the asynchronous driver initialization process has finished.\n   * That’s useful in cases like when we want to know which driver localForage has settled down using.\n   */\n  public ready(): Promise<void> {\n    return this.store.ready();\n  }\n\n  /**\n   * Removes the value of a key from the offline store.\n   * @param key Data key\n   */\n  public removeItem(key: string): Promise<void> {\n    return this.store.removeItem(key);\n  }\n\n  /**\n   * Saves data to an offline store. You can store the following types of JavaScript objects:\n   * <ul>\n   *  <li>Array</li>\n   *  <li>ArrayBuffer</li>\n   *  <li>Blob</li>\n   *  <li>Float32Array</li>\n   *  <li>Float64Array</li>\n   *  <li>Int8Array</li>\n   *  <li>Int16Array</li>\n   *  <li>Int32Array</li>\n   *  <li>Number</li>\n   *  <li>Object</li>\n   *  <li>Uint8Array</li>\n   *  <li>Uint8ClampedArray</li>\n   *  <li>Uint16Array</li>\n   *  <li>Uint32Array</li>\n   *  <li>String</li>\n   * </ul>\n   * @param key Data key\n   * @param data Data\n   */\n  public setItem<T>(key: string, data: T): Promise<T> {\n    return this.store.setItem<T>(key, data);\n  }\n\n  /**\n   * Check whether the given driver is supported/registered.\n   * @param driver Driver name\n   */\n  public supports(driver: string): boolean {\n    return this.store.supports(driver);\n  }\n}\n\nObject.defineProperty(NgForage.prototype, Symbol.toStringTag, {value: 'NgForage'});\n",
    "import {LazyGetter} from 'typescript-lazy-get-decorator';\nimport {CachedItem} from './CachedItem';\n\n/** @internal */\nexport class CachedItemImpl<T> implements CachedItem<T> {\n\n  public readonly expires: Date;\n\n  public constructor(public readonly data: T, expiryTime: number) {\n    this.expires = new Date(typeof expiryTime === 'number' ? expiryTime : 0);\n  }\n\n  @LazyGetter()\n  public get expired(): boolean {\n    return this.expiresIn === 0;\n  }\n\n  @LazyGetter()\n  public get expiresIn(): number {\n    return Math.max(0, this.expires.getTime() - Date.now());\n  }\n\n  @LazyGetter()\n  public get hasData(): boolean {\n    return this.data !== null;\n  }\n\n  public toJSON(): CachedItem<T> {\n    return {\n      data: this.data,\n      expired: this.expired,\n      expires: this.expires,\n      expiresIn: this.expiresIn,\n      hasData: this.hasData\n    };\n  }\n\n  public toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nObject.defineProperty(CachedItemImpl.prototype, Symbol.toStringTag, {value: 'CachedItem'});\n",
    "import {Injectable} from '@angular/core';\nimport {CacheConfigurable} from '../config/CacheConfigurable';\nimport {NgForageOptions} from '../config/NgForageOptions';\nimport {NgForage} from '../main/NgForage.service';\nimport {CachedItem} from './CachedItem';\nimport {CachedItemImpl} from './CachedItemImpl';\n\n/** @internal */\ninterface CacheKeys {\n  data: string;\n  expiry: string;\n}\n\n/** @internal */\nfunction calculateCacheKeys(mainKey: string): CacheKeys {\n  return {\n    data: `${mainKey}_data`,\n    expiry: `${mainKey}_expiry`\n  };\n}\n\n/** @internal */\nfunction toCachedItem<T>(r: [T, number]): CachedItem<T> {\n  return new CachedItemImpl<T>(r[0], r[1]);\n}\n\n/** @internal */\nfunction head<T>(r: [T, number]) {\n  return r[0];\n}\n\n/** @internal */\n// tslint:disable-next-line:no-empty\nfunction toVoid(): void {\n\n}\n\n/**\n * An extension of {@link NgForage} which adds expiration support\n */\n@Injectable({providedIn: 'root'})\nexport class NgForageCache extends NgForage implements CacheConfigurable {\n\n  /**\n   * Cache time in milliseconds\n   * @default 300000\n   */\n  public get cacheTime(): number {\n    return 'cacheTime' in this.config ? this.config.cacheTime : this.baseConfig.cacheTime;\n  }\n\n  public set cacheTime(t: number) {\n    this.config.cacheTime = t;\n    this.storeNeedsRecalc = true;\n  }\n\n  /** @inheritDoc */\n  public clone(config?: NgForageOptions): NgForageCache {\n    const inst = new NgForageCache(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n\n  /**\n   * Retrieve data\n   * @param key Data key\n   */\n  public getCached<T>(key: string): Promise<CachedItem<T>> {\n    const keys = calculateCacheKeys(key);\n    const dataPromise = this.getItem<T>(keys.data);\n    const expiryPromise = this.getItem<number>(keys.expiry);\n\n    return Promise.all([dataPromise, expiryPromise]).then(toCachedItem);\n  }\n\n  /**\n   * Remove data\n   * @param key Data key\n   */\n  public removeCached(key: string): Promise<void> {\n    const keys = calculateCacheKeys(key);\n\n    const dataPromise = this.removeItem(keys.data);\n    const expiryPromise = this.removeItem(keys.expiry);\n\n    return Promise.all([dataPromise, expiryPromise]).then(toVoid);\n  }\n\n  /**\n   * Set data\n   * @param key Data key\n   * @param data Data to set\n   * @param [cacheTime] Override cache set in {@link CacheConfigurable#cacheTime global or instance config}.\n   */\n  public setCached<T>(key: string, data: T, cacheTime?: number): Promise<T> {\n    const keys = calculateCacheKeys(key);\n    const expiry = typeof cacheTime === 'number' ? cacheTime : this.cacheTime;\n\n    const dataPromise = this.setItem<T>(keys.data, data);\n    const expiryPromise = this.setItem<number>(keys.expiry, Date.now() + expiry);\n\n    return Promise.all([dataPromise, expiryPromise]).then(head);\n  }\n\n  /** @internal */\n  public toJSON(): NgForageOptions {\n    const ass: Partial<NgForageOptions> = {cacheTime: this.cacheTime};\n\n    return Object.assign(super.toJSON(), ass);\n  }\n}\n\nObject.defineProperty(NgForageCache.prototype, Symbol.toStringTag, {value: 'NgForageCache'});\n",
    "import {NgForageCache} from '../cache/NgForageCache.service';\nimport {NgForageOptions} from '../config/NgForageOptions';\n\n/** @internal */\nexport class NgForageCacheDedicated extends NgForageCache {\n\n  public clone(config?: NgForageOptions): NgForageCache {\n    const inst = new NgForageCacheDedicated(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n}\n\nObject.defineProperty(NgForageCacheDedicated.prototype, Symbol.toStringTag, {value: 'NgForageCache (dedicated)'});\n",
    "import {NgForageOptions} from '../config/NgForageOptions';\nimport {NgForage} from '../main/NgForage.service';\n\n/** @internal */\nexport class NgForageDedicated extends NgForage {\n\n  public clone(config?: NgForageOptions): NgForage {\n    const inst = new NgForageDedicated(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n}\n\nObject.defineProperty(NgForageDedicated.prototype, Symbol.toStringTag, {value: 'NgForage (dedicated)'});\n",
    "import {Injectable} from '@angular/core';\nimport {NgForageCache} from '../cache/NgForageCache.service';\nimport {NgForageConfig} from '../config/NgForageConfig.service';\nimport {NgForageOptions} from '../config/NgForageOptions';\nimport {InstanceFactory} from '../instance-factory/InstanceFactory.service';\nimport {NgForage} from '../main/NgForage.service';\nimport {NgForageCacheDedicated} from './NgForageCacheDedicated';\nimport {NgForageDedicated} from './NgForageDedicated';\n\n/** @internal */\nconst conf$ = Symbol('NgForageConfig');\n/** @internal */\nconst if$ = Symbol('InstanceFactory');\n\n@Injectable({providedIn: 'root'})\nexport class DedicatedInstanceFactory {\n  public constructor(conf: NgForageConfig, instFact: InstanceFactory) {\n    this[conf$] = conf;\n    this[if$] = instFact;\n  }\n\n  public createCache(config?: NgForageOptions): NgForageCache {\n    const inst = new NgForageCacheDedicated(<NgForageConfig>this[conf$], <InstanceFactory>this[if$]);\n    if (config) {\n      inst.configure(config);\n    }\n\n    return inst;\n  }\n\n  public createNgForage(config?: NgForageOptions): NgForage {\n    const inst = new NgForageDedicated(<NgForageConfig>this[conf$], <InstanceFactory>this[if$]);\n    if (config) {\n      inst.configure(config);\n    }\n\n    return inst;\n  }\n}\n"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "__decorate",
    "decorators",
    "target",
    "key",
    "desc",
    "c",
    "arguments",
    "length",
    "r",
    "getOwnPropertyDescriptor",
    "Reflect",
    "decorate",
    "i",
    "defineProperty",
    "__metadata",
    "metadataKey",
    "metadataValue",
    "metadata",
    "lf",
    "require",
    "localForage",
    "default",
    "serializer$",
    "serializer",
    "_getKeyPrefix",
    "options",
    "defaultConfig",
    "keyPrefix",
    "name",
    "storeName",
    "_isSessionStorageUsable",
    "sessionStorage",
    "testKey",
    "setItem",
    "removeItem",
    "e",
    "checkIfSessionStorageThrows",
    "executeCallback",
    "promise",
    "callback",
    "then",
    "result",
    "error",
    "normalizeKey",
    "console",
    "warn",
    "String",
    "_driver",
    "sessionStorageWrapper",
    "_initStorage",
    "dbInfo",
    "_defaultConfig",
    "_dbInfo",
    "Promise",
    "resolve",
    "reject",
    "Error",
    "_support",
    "clear",
    "_this",
    "ready",
    "key$",
    "indexOf",
    "dropInstance",
    "apply",
    "currentConfig",
    "config",
    "getItem",
    "deserialize",
    "iterate",
    "iterator",
    "keyPrefixLength",
    "length$",
    "iterationNumber",
    "value",
    "substring",
    "n",
    "keys",
    "keys$",
    "itemKey",
    "push",
    "undefined",
    "originalValue",
    "serialize",
    "value$",
    "defineDriver",
    "catch",
    "DEFAULT_CONFIG",
    "InjectionToken",
    "NgForageModule",
    "forRoot",
    "ngModule",
    "providers",
    "provide",
    "useValue",
    "assign",
    "type",
    "NgModule",
    "args",
    "$defaultConfig",
    "Symbol",
    "NgForageConfig",
    "conf",
    "cacheTime",
    "description",
    "driver",
    "INDEXEDDB",
    "WEBSQL",
    "LOCALSTORAGE",
    "size",
    "version",
    "configure",
    "get",
    "set",
    "t",
    "v",
    "slice",
    "opts",
    "spec",
    "toJSON",
    "toString",
    "JSON",
    "stringify",
    "DRIVER_INDEXEDDB",
    "DRIVER_LOCALSTORAGE",
    "DRIVER_SESSIONSTORAGE",
    "DRIVER_WEBSQL",
    "Injectable",
    "providedIn",
    "Optional",
    "Inject",
    "toStringTag",
    "stores",
    "conf$",
    "InstanceFactory",
    "getInstance",
    "cfg",
    "hash",
    "sort",
    "join",
    "createInstance",
    "store$",
    "BaseConfigurableImpl",
    "instanceFactory",
    "storeNeedsRecalc",
    "baseConfig",
    "fact",
    "finalConfig",
    "NgForage",
    "_super",
    "tslib_1.__extends",
    "store",
    "clone",
    "inst",
    "iteratee",
    "index",
    "data",
    "supports",
    "CachedItemImpl",
    "expiryTime",
    "expires",
    "Date",
    "expiresIn",
    "Math",
    "max",
    "getTime",
    "now",
    "expired",
    "hasData",
    "calculateCacheKeys",
    "mainKey",
    "expiry",
    "toCachedItem",
    "head",
    "toVoid",
    "LazyGetter",
    "NgForageCache",
    "getCached",
    "dataPromise",
    "expiryPromise",
    "all",
    "removeCached",
    "setCached",
    "ass",
    "call",
    "NgForageCacheDedicated",
    "NgForageDedicated",
    "if$",
    "DedicatedInstanceFactory",
    "instFact",
    "createCache",
    "createNgForage"
  ],
  "mappings": "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"
}
